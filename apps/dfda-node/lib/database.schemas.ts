/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database.types";

export const publicActionCategorySchema = z.union([
  z.literal("lab_work"),
  z.literal("imaging"),
  z.literal("assessment"),
  z.literal("review"),
  z.literal("procedure"),
  z.literal("consultation"),
  z.literal("medication"),
  z.literal("other"),
]);

export const publicCitationTypeSchema = z.union([
  z.literal("journal_article"),
  z.literal("book"),
  z.literal("webpage"),
  z.literal("fda_label"),
  z.literal("usda_entry"),
  z.literal("other"),
]);

export const publicEvidenceCertaintyEnumSchema = z.union([
  z.literal("High"),
  z.literal("Moderate"),
  z.literal("Low"),
  z.literal("Very Low"),
]);

export const publicFormQuestionTypeSchema = z.union([
  z.literal("text"),
  z.literal("multiple-choice"),
  z.literal("checkbox"),
  z.literal("dropdown"),
  z.literal("scale"),
  z.literal("date"),
  z.literal("file_upload"),
]);

export const publicProductTypeEnumSchema = z.union([
  z.literal("trackable_item"),
  z.literal("lab_test"),
  z.literal("wearable_device"),
  z.literal("service"),
  z.literal("other"),
]);

export const publicRelationshipCategoryEnumSchema = z.union([
  z.literal("Efficacy"),
  z.literal("Safety"),
  z.literal("Mechanism"),
  z.literal("Correlation"),
]);

export const publicReminderNotificationStatusSchema = z.union([
  z.literal("pending"),
  z.literal("completed"),
  z.literal("skipped"),
  z.literal("error"),
]);

export const publicUserRoleEnumSchema = z.union([
  z.literal("patient"),
  z.literal("provider"),
  z.literal("research-partner"),
  z.literal("admin"),
  z.literal("developer"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicActionTypesRowSchemaSchema = z.object({
  can_be_recurring: z.boolean().nullable(),
  category: publicActionCategorySchema,
  created_at: z.string().nullable(),
  default_duration_minutes: z.number().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  name: z.string(),
  requires_results: z.boolean().nullable(),
  requires_scheduling: z.boolean().nullable(),
  updated_at: z.string().nullable(),
});

export const publicActionTypesInsertSchemaSchema = z.object({
  can_be_recurring: z.boolean().optional().nullable(),
  category: publicActionCategorySchema,
  created_at: z.string().optional().nullable(),
  default_duration_minutes: z.number().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string(),
  requires_results: z.boolean().optional().nullable(),
  requires_scheduling: z.boolean().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicActionTypesUpdateSchemaSchema = z.object({
  can_be_recurring: z.boolean().optional().nullable(),
  category: publicActionCategorySchema.optional(),
  created_at: z.string().optional().nullable(),
  default_duration_minutes: z.number().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional(),
  requires_results: z.boolean().optional().nullable(),
  requires_scheduling: z.boolean().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicCitationsRowSchemaSchema = z.object({
  abstract: z.string().nullable(),
  aggregate_participant_count: z.number().nullable(),
  aggregate_trial_count: z.number().nullable(),
  authors: z.array(z.string()).nullable(),
  created_at: z.string(),
  doi: z.string().nullable(),
  id: z.string(),
  issue: z.string().nullable(),
  journal_or_publisher: z.string().nullable(),
  pages: z.string().nullable(),
  pmid: z.string().nullable(),
  publication_year: z.number().nullable(),
  retrieved_at: z.string().nullable(),
  title: z.string().nullable(),
  type: publicCitationTypeSchema,
  updated_at: z.string(),
  url: z.string().nullable(),
  volume: z.string().nullable(),
});

export const publicCitationsInsertSchemaSchema = z.object({
  abstract: z.string().optional().nullable(),
  aggregate_participant_count: z.number().optional().nullable(),
  aggregate_trial_count: z.number().optional().nullable(),
  authors: z.array(z.string()).optional().nullable(),
  created_at: z.string().optional(),
  doi: z.string().optional().nullable(),
  id: z.string().optional(),
  issue: z.string().optional().nullable(),
  journal_or_publisher: z.string().optional().nullable(),
  pages: z.string().optional().nullable(),
  pmid: z.string().optional().nullable(),
  publication_year: z.number().optional().nullable(),
  retrieved_at: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  type: publicCitationTypeSchema,
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
  volume: z.string().optional().nullable(),
});

export const publicCitationsUpdateSchemaSchema = z.object({
  abstract: z.string().optional().nullable(),
  aggregate_participant_count: z.number().optional().nullable(),
  aggregate_trial_count: z.number().optional().nullable(),
  authors: z.array(z.string()).optional().nullable(),
  created_at: z.string().optional(),
  doi: z.string().optional().nullable(),
  id: z.string().optional(),
  issue: z.string().optional().nullable(),
  journal_or_publisher: z.string().optional().nullable(),
  pages: z.string().optional().nullable(),
  pmid: z.string().optional().nullable(),
  publication_year: z.number().optional().nullable(),
  retrieved_at: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  type: publicCitationTypeSchema.optional(),
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
  volume: z.string().optional().nullable(),
});

export const publicConditionsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  icd_code: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicConditionsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  icd_code: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicConditionsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  icd_code: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicConditionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("conditions_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicContactMessagesRowSchemaSchema = z.object({
  assigned_to: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  email: z.string(),
  id: z.string(),
  message: z.string(),
  name: z.string(),
  resolved_at: z.string().nullable(),
  status: z.string(),
  subject: z.string(),
  updated_at: z.string().nullable(),
});

export const publicContactMessagesInsertSchemaSchema = z.object({
  assigned_to: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  email: z.string(),
  id: z.string().optional(),
  message: z.string(),
  name: z.string(),
  resolved_at: z.string().optional().nullable(),
  status: z.string().optional(),
  subject: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicContactMessagesUpdateSchemaSchema = z.object({
  assigned_to: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  email: z.string().optional(),
  id: z.string().optional(),
  message: z.string().optional(),
  name: z.string().optional(),
  resolved_at: z.string().optional().nullable(),
  status: z.string().optional(),
  subject: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicContactMessagesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("contact_messages_assigned_to_fkey"),
    columns: z.tuple([z.literal("assigned_to")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicDataSubmissionsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  data: jsonSchema,
  deleted_at: z.string().nullable(),
  enrollment_id: z.string(),
  id: z.string(),
  patient_id: z.string(),
  review_date: z.string().nullable(),
  review_notes: z.string().nullable(),
  reviewed_by: z.string().nullable(),
  status: z.string(),
  submission_date: z.string(),
  updated_at: z.string().nullable(),
});

export const publicDataSubmissionsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  data: jsonSchema,
  deleted_at: z.string().optional().nullable(),
  enrollment_id: z.string(),
  id: z.string().optional(),
  patient_id: z.string(),
  review_date: z.string().optional().nullable(),
  review_notes: z.string().optional().nullable(),
  reviewed_by: z.string().optional().nullable(),
  status: z.string(),
  submission_date: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicDataSubmissionsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  data: jsonSchema.optional(),
  deleted_at: z.string().optional().nullable(),
  enrollment_id: z.string().optional(),
  id: z.string().optional(),
  patient_id: z.string().optional(),
  review_date: z.string().optional().nullable(),
  review_notes: z.string().optional().nullable(),
  reviewed_by: z.string().optional().nullable(),
  status: z.string().optional(),
  submission_date: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicDataSubmissionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("data_submissions_enrollment_id_fkey"),
    columns: z.tuple([z.literal("enrollment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trial_enrollments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("data_submissions_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("data_submissions_reviewed_by_fkey"),
    columns: z.tuple([z.literal("reviewed_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFoodDetailsRowSchemaSchema = z.object({
  calories_per_serving: z.number().nullable(),
  carbs_per_serving: z.number().nullable(),
  created_at: z.string(),
  fat_per_serving: z.number().nullable(),
  global_variable_id: z.string(),
  protein_per_serving: z.number().nullable(),
  serving_size_quantity: z.number().nullable(),
  serving_size_unit_id: z.string().nullable(),
  updated_at: z.string(),
});

export const publicFoodDetailsInsertSchemaSchema = z.object({
  calories_per_serving: z.number().optional().nullable(),
  carbs_per_serving: z.number().optional().nullable(),
  created_at: z.string().optional(),
  fat_per_serving: z.number().optional().nullable(),
  global_variable_id: z.string(),
  protein_per_serving: z.number().optional().nullable(),
  serving_size_quantity: z.number().optional().nullable(),
  serving_size_unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicFoodDetailsUpdateSchemaSchema = z.object({
  calories_per_serving: z.number().optional().nullable(),
  carbs_per_serving: z.number().optional().nullable(),
  created_at: z.string().optional(),
  fat_per_serving: z.number().optional().nullable(),
  global_variable_id: z.string().optional(),
  protein_per_serving: z.number().optional().nullable(),
  serving_size_quantity: z.number().optional().nullable(),
  serving_size_unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicFoodDetailsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("food_details_global_variable_id_fkey"),
    columns: z.tuple([z.literal("global_variable_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("food_details_serving_size_unit_id_fkey"),
    columns: z.tuple([z.literal("serving_size_unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFormAnswersRowSchemaSchema = z.object({
  answer_value: jsonSchema,
  created_at: z.string(),
  id: z.string(),
  question_id: z.string(),
  submission_id: z.string(),
  updated_at: z.string(),
});

export const publicFormAnswersInsertSchemaSchema = z.object({
  answer_value: jsonSchema,
  created_at: z.string().optional(),
  id: z.string().optional(),
  question_id: z.string(),
  submission_id: z.string(),
  updated_at: z.string().optional(),
});

export const publicFormAnswersUpdateSchemaSchema = z.object({
  answer_value: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  question_id: z.string().optional(),
  submission_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicFormAnswersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("form_answers_question_id_fkey"),
    columns: z.tuple([z.literal("question_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("form_questions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("form_answers_submission_id_fkey"),
    columns: z.tuple([z.literal("submission_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("form_submissions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFormQuestionsRowSchemaSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  form_id: z.string(),
  id: z.string(),
  is_required: z.boolean(),
  options: jsonSchema.nullable(),
  order: z.number(),
  question_text: z.string(),
  type: publicFormQuestionTypeSchema,
  updated_at: z.string(),
});

export const publicFormQuestionsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  form_id: z.string(),
  id: z.string().optional(),
  is_required: z.boolean().optional(),
  options: jsonSchema.optional().nullable(),
  order: z.number(),
  question_text: z.string(),
  type: publicFormQuestionTypeSchema,
  updated_at: z.string().optional(),
});

export const publicFormQuestionsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  form_id: z.string().optional(),
  id: z.string().optional(),
  is_required: z.boolean().optional(),
  options: jsonSchema.optional().nullable(),
  order: z.number().optional(),
  question_text: z.string().optional(),
  type: publicFormQuestionTypeSchema.optional(),
  updated_at: z.string().optional(),
});

export const publicFormQuestionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("form_questions_form_id_fkey"),
    columns: z.tuple([z.literal("form_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("forms"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFormSubmissionsRowSchemaSchema = z.object({
  created_at: z.string(),
  form_id: z.string(),
  id: z.string(),
  patient_id: z.string(),
  submitted_at: z.string(),
  updated_at: z.string(),
});

export const publicFormSubmissionsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  form_id: z.string(),
  id: z.string().optional(),
  patient_id: z.string(),
  submitted_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicFormSubmissionsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  form_id: z.string().optional(),
  id: z.string().optional(),
  patient_id: z.string().optional(),
  submitted_at: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicFormSubmissionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("form_submissions_form_id_fkey"),
    columns: z.tuple([z.literal("form_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("forms"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("form_submissions_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicFormsRowSchemaSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  title: z.string(),
  updated_at: z.string(),
});

export const publicFormsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  title: z.string(),
  updated_at: z.string().optional(),
});

export const publicFormsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicGlobalVariableRelationshipsRowSchemaSchema = z.object({
  absolute_change_ci_lower: z.number().nullable(),
  absolute_change_ci_upper: z.number().nullable(),
  absolute_change_unit_id: z.string().nullable(),
  absolute_change_value: z.number().nullable(),
  baseline_description: z.string().nullable(),
  category: publicRelationshipCategoryEnumSchema,
  certainty_of_evidence: publicEvidenceCertaintyEnumSchema.nullable(),
  citation_id: z.string(),
  condition_id: z.string().nullable(),
  confidence_interval_level: z.number().nullable(),
  created_at: z.string(),
  data_last_updated: z.string().nullable(),
  finding_specific_notes: z.string().nullable(),
  id: z.string(),
  is_positive_outcome: z.boolean().nullable(),
  nnh: z.number().nullable(),
  nnt: z.number().nullable(),
  outcome_global_variable_id: z.string(),
  p_value: z.number().nullable(),
  percentage_change: z.number().nullable(),
  percentage_change_ci_lower: z.number().nullable(),
  percentage_change_ci_upper: z.number().nullable(),
  predictor_global_variable_id: z.string(),
  updated_at: z.string(),
});

export const publicGlobalVariableRelationshipsInsertSchemaSchema = z.object({
  absolute_change_ci_lower: z.number().optional().nullable(),
  absolute_change_ci_upper: z.number().optional().nullable(),
  absolute_change_unit_id: z.string().optional().nullable(),
  absolute_change_value: z.number().optional().nullable(),
  baseline_description: z.string().optional().nullable(),
  category: publicRelationshipCategoryEnumSchema,
  certainty_of_evidence: publicEvidenceCertaintyEnumSchema
    .optional()
    .nullable(),
  citation_id: z.string(),
  condition_id: z.string().optional().nullable(),
  confidence_interval_level: z.number().optional().nullable(),
  created_at: z.string().optional(),
  data_last_updated: z.string().optional().nullable(),
  finding_specific_notes: z.string().optional().nullable(),
  id: z.string().optional(),
  is_positive_outcome: z.boolean().optional().nullable(),
  nnh: z.number().optional().nullable(),
  nnt: z.number().optional().nullable(),
  outcome_global_variable_id: z.string(),
  p_value: z.number().optional().nullable(),
  percentage_change: z.number().optional().nullable(),
  percentage_change_ci_lower: z.number().optional().nullable(),
  percentage_change_ci_upper: z.number().optional().nullable(),
  predictor_global_variable_id: z.string(),
  updated_at: z.string().optional(),
});

export const publicGlobalVariableRelationshipsUpdateSchemaSchema = z.object({
  absolute_change_ci_lower: z.number().optional().nullable(),
  absolute_change_ci_upper: z.number().optional().nullable(),
  absolute_change_unit_id: z.string().optional().nullable(),
  absolute_change_value: z.number().optional().nullable(),
  baseline_description: z.string().optional().nullable(),
  category: publicRelationshipCategoryEnumSchema.optional(),
  certainty_of_evidence: publicEvidenceCertaintyEnumSchema
    .optional()
    .nullable(),
  citation_id: z.string().optional(),
  condition_id: z.string().optional().nullable(),
  confidence_interval_level: z.number().optional().nullable(),
  created_at: z.string().optional(),
  data_last_updated: z.string().optional().nullable(),
  finding_specific_notes: z.string().optional().nullable(),
  id: z.string().optional(),
  is_positive_outcome: z.boolean().optional().nullable(),
  nnh: z.number().optional().nullable(),
  nnt: z.number().optional().nullable(),
  outcome_global_variable_id: z.string().optional(),
  p_value: z.number().optional().nullable(),
  percentage_change: z.number().optional().nullable(),
  percentage_change_ci_lower: z.number().optional().nullable(),
  percentage_change_ci_upper: z.number().optional().nullable(),
  predictor_global_variable_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicGlobalVariableRelationshipsRelationshipsSchemaSchema =
  z.tuple([
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_absolute_change_unit_id_fkey",
      ),
      columns: z.tuple([z.literal("absolute_change_unit_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("units"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_citation_id_fkey",
      ),
      columns: z.tuple([z.literal("citation_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("citations"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_condition_id_fkey",
      ),
      columns: z.tuple([z.literal("condition_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("conditions"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_condition_id_fkey",
      ),
      columns: z.tuple([z.literal("condition_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("patient_conditions_view"),
      referencedColumns: z.tuple([z.literal("condition_id")]),
    }),
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_outcome_global_variable_id_fkey",
      ),
      columns: z.tuple([z.literal("outcome_global_variable_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("global_variables"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal(
        "global_variable_relationships_predictor_global_variable_id_fkey",
      ),
      columns: z.tuple([z.literal("predictor_global_variable_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("global_variables"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ]);

export const publicGlobalVariableSynonymsRowSchemaSchema = z.object({
  created_at: z.string(),
  global_variable_id: z.string(),
  id: z.string(),
  name: z.string(),
  updated_at: z.string(),
});

export const publicGlobalVariableSynonymsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  global_variable_id: z.string(),
  id: z.string().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
});

export const publicGlobalVariableSynonymsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  global_variable_id: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicGlobalVariableSynonymsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "global_variable_synonyms_global_variable_id_fkey",
    ),
    columns: z.tuple([z.literal("global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicGlobalVariablesRowSchemaSchema = z.object({
  canonical_global_variable_id: z.string().nullable(),
  created_at: z.string().nullable(),
  default_unit_id: z.string(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  emoji: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  name: z.string(),
  updated_at: z.string().nullable(),
  variable_category_id: z.string(),
});

export const publicGlobalVariablesInsertSchemaSchema = z.object({
  canonical_global_variable_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  default_unit_id: z.string(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  updated_at: z.string().optional().nullable(),
  variable_category_id: z.string(),
});

export const publicGlobalVariablesUpdateSchemaSchema = z.object({
  canonical_global_variable_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  default_unit_id: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  variable_category_id: z.string().optional(),
});

export const publicGlobalVariablesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "global_variables_canonical_global_variable_id_fkey",
    ),
    columns: z.tuple([z.literal("canonical_global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("global_variables_default_unit_id_fkey"),
    columns: z.tuple([z.literal("default_unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("global_variables_variable_category_id_fkey"),
    columns: z.tuple([z.literal("variable_category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("variable_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMeasurementsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  end_at: z.string().nullable(),
  global_variable_id: z.string(),
  id: z.string(),
  notes: z.string().nullable(),
  start_at: z.string(),
  unit_id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
  user_variable_id: z.string().nullable(),
  value: z.number(),
});

export const publicMeasurementsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  end_at: z.string().optional().nullable(),
  global_variable_id: z.string(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  start_at: z.string(),
  unit_id: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
  user_variable_id: z.string().optional().nullable(),
  value: z.number(),
});

export const publicMeasurementsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  end_at: z.string().optional().nullable(),
  global_variable_id: z.string().optional(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  start_at: z.string().optional(),
  unit_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
  user_variable_id: z.string().optional().nullable(),
  value: z.number().optional(),
});

export const publicMeasurementsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("measurements_global_variable_id_fkey"),
    columns: z.tuple([z.literal("global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("measurements_unit_id_fkey"),
    columns: z.tuple([z.literal("unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("measurements_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("measurements_user_variable_id_fkey"),
    columns: z.tuple([z.literal("user_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicNotificationsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  emoji: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  link: z.string().nullable(),
  message: z.string(),
  read_at: z.string().nullable(),
  title: z.string(),
  type: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicNotificationsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  message: z.string(),
  read_at: z.string().optional().nullable(),
  title: z.string(),
  type: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicNotificationsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  message: z.string().optional(),
  read_at: z.string().optional().nullable(),
  title: z.string().optional(),
  type: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicNotificationsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("notifications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOauthAccessTokensRowSchemaSchema = z.object({
  client_id: z.string(),
  created_at: z.string().nullable(),
  expires_at: z.string(),
  id: z.string(),
  revoked_at: z.string().nullable(),
  scope: z.string(),
  token: z.string(),
  user_id: z.string(),
});

export const publicOauthAccessTokensInsertSchemaSchema = z.object({
  client_id: z.string(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string(),
  id: z.string().optional(),
  revoked_at: z.string().optional().nullable(),
  scope: z.string(),
  token: z.string(),
  user_id: z.string(),
});

export const publicOauthAccessTokensUpdateSchemaSchema = z.object({
  client_id: z.string().optional(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string().optional(),
  id: z.string().optional(),
  revoked_at: z.string().optional().nullable(),
  scope: z.string().optional(),
  token: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicOauthAccessTokensRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("oauth_access_tokens_client_id_fkey"),
    columns: z.tuple([z.literal("client_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("oauth_clients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("oauth_access_tokens_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOauthClientsRowSchemaSchema = z.object({
  client_id: z.string(),
  client_name: z.string(),
  client_secret: z.string(),
  client_uri: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  grant_types: z.array(z.string()),
  id: z.string(),
  logo_uri: z.string().nullable(),
  owner_id: z.string(),
  policy_uri: z.string().nullable(),
  redirect_uris: z.array(z.string()),
  response_types: z.array(z.string()),
  scope: z.string(),
  tos_uri: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicOauthClientsInsertSchemaSchema = z.object({
  client_id: z.string(),
  client_name: z.string(),
  client_secret: z.string(),
  client_uri: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  grant_types: z.array(z.string()),
  id: z.string().optional(),
  logo_uri: z.string().optional().nullable(),
  owner_id: z.string(),
  policy_uri: z.string().optional().nullable(),
  redirect_uris: z.array(z.string()),
  response_types: z.array(z.string()),
  scope: z.string(),
  tos_uri: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicOauthClientsUpdateSchemaSchema = z.object({
  client_id: z.string().optional(),
  client_name: z.string().optional(),
  client_secret: z.string().optional(),
  client_uri: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  grant_types: z.array(z.string()).optional(),
  id: z.string().optional(),
  logo_uri: z.string().optional().nullable(),
  owner_id: z.string().optional(),
  policy_uri: z.string().optional().nullable(),
  redirect_uris: z.array(z.string()).optional(),
  response_types: z.array(z.string()).optional(),
  scope: z.string().optional(),
  tos_uri: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicOauthClientsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("oauth_clients_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOauthRefreshTokensRowSchemaSchema = z.object({
  access_token_id: z.string(),
  client_id: z.string(),
  created_at: z.string().nullable(),
  expires_at: z.string(),
  id: z.string(),
  revoked_at: z.string().nullable(),
  scope: z.string(),
  token: z.string(),
  user_id: z.string(),
});

export const publicOauthRefreshTokensInsertSchemaSchema = z.object({
  access_token_id: z.string(),
  client_id: z.string(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string(),
  id: z.string().optional(),
  revoked_at: z.string().optional().nullable(),
  scope: z.string(),
  token: z.string(),
  user_id: z.string(),
});

export const publicOauthRefreshTokensUpdateSchemaSchema = z.object({
  access_token_id: z.string().optional(),
  client_id: z.string().optional(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string().optional(),
  id: z.string().optional(),
  revoked_at: z.string().optional().nullable(),
  scope: z.string().optional(),
  token: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicOauthRefreshTokensRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("oauth_refresh_tokens_access_token_id_fkey"),
    columns: z.tuple([z.literal("access_token_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("oauth_access_tokens"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("oauth_refresh_tokens_client_id_fkey"),
    columns: z.tuple([z.literal("client_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("oauth_clients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("oauth_refresh_tokens_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOauthScopesRowSchemaSchema = z.object({
  description: z.string().nullable(),
  scope: z.string(),
});

export const publicOauthScopesInsertSchemaSchema = z.object({
  description: z.string().optional().nullable(),
  scope: z.string(),
});

export const publicOauthScopesUpdateSchemaSchema = z.object({
  description: z.string().optional().nullable(),
  scope: z.string().optional(),
});

export const publicPatientConditionsRowSchemaSchema = z.object({
  condition_id: z.string(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  diagnosed_at: z.string().nullable(),
  id: z.string(),
  notes: z.string().nullable(),
  patient_id: z.string(),
  severity: z.string().nullable(),
  status: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicPatientConditionsInsertSchemaSchema = z.object({
  condition_id: z.string(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  diagnosed_at: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  patient_id: z.string(),
  severity: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPatientConditionsUpdateSchemaSchema = z.object({
  condition_id: z.string().optional(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  diagnosed_at: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  patient_id: z.string().optional(),
  severity: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPatientConditionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("patient_conditions_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("conditions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_conditions_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_conditions_view"),
    referencedColumns: z.tuple([z.literal("condition_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_conditions_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPatientTreatmentsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  end_date: z.string().nullable(),
  id: z.string(),
  is_prescribed: z.boolean(),
  patient_id: z.string(),
  patient_notes: z.string().nullable(),
  start_date: z.string().nullable(),
  status: z.string(),
  treatment_id: z.string(),
  updated_at: z.string().nullable(),
  user_variable_id: z.string(),
});

export const publicPatientTreatmentsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_prescribed: z.boolean().optional(),
  patient_id: z.string(),
  patient_notes: z.string().optional().nullable(),
  start_date: z.string().optional().nullable(),
  status: z.string().optional(),
  treatment_id: z.string(),
  updated_at: z.string().optional().nullable(),
  user_variable_id: z.string(),
});

export const publicPatientTreatmentsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_prescribed: z.boolean().optional(),
  patient_id: z.string().optional(),
  patient_notes: z.string().optional().nullable(),
  start_date: z.string().optional().nullable(),
  status: z.string().optional(),
  treatment_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_variable_id: z.string().optional(),
});

export const publicPatientTreatmentsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("patient_treatments_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_treatments_treatment_id_fkey"),
    columns: z.tuple([z.literal("treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_treatments_user_variable_id_fkey"),
    columns: z.tuple([z.literal("user_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPatientsRowSchemaSchema = z.object({
  allergies: z.array(z.string()).nullable(),
  blood_type: z.string().nullable(),
  created_at: z.string().nullable(),
  date_of_birth: z.string().nullable(),
  deleted_at: z.string().nullable(),
  gender: z.string().nullable(),
  height: z.number().nullable(),
  id: z.string(),
  medications: z.array(z.string()).nullable(),
  updated_at: z.string().nullable(),
  weight: z.number().nullable(),
});

export const publicPatientsInsertSchemaSchema = z.object({
  allergies: z.array(z.string()).optional().nullable(),
  blood_type: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  date_of_birth: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  height: z.number().optional().nullable(),
  id: z.string(),
  medications: z.array(z.string()).optional().nullable(),
  updated_at: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
});

export const publicPatientsUpdateSchemaSchema = z.object({
  allergies: z.array(z.string()).optional().nullable(),
  blood_type: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  date_of_birth: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  height: z.number().optional().nullable(),
  id: z.string().optional(),
  medications: z.array(z.string()).optional().nullable(),
  updated_at: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
});

export const publicPatientsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("patients_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPharmaciesRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  updated_at: z.string().nullable(),
});

export const publicPharmaciesInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicPharmaciesUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPrescriptionsRowSchemaSchema = z.object({
  allow_substitutions: z.boolean().nullable(),
  created_at: z.string().nullable(),
  dosage_amount: z.number().nullable(),
  dosage_unit: z.string().nullable(),
  duration_days: z.number().nullable(),
  frequency: z.string().nullable(),
  id: z.string(),
  patient_treatment_id: z.string(),
  pharmacy_id: z.string().nullable(),
  prescriber_notes: z.string().nullable(),
  prescription_date: z.string(),
  provider_id: z.string(),
  quantity_to_dispense: z.string(),
  refills_authorized: z.number(),
  route: z.string().nullable(),
  sig: z.string().nullable(),
  status: z.string(),
  updated_at: z.string().nullable(),
});

export const publicPrescriptionsInsertSchemaSchema = z.object({
  allow_substitutions: z.boolean().optional().nullable(),
  created_at: z.string().optional().nullable(),
  dosage_amount: z.number().optional().nullable(),
  dosage_unit: z.string().optional().nullable(),
  duration_days: z.number().optional().nullable(),
  frequency: z.string().optional().nullable(),
  id: z.string().optional(),
  patient_treatment_id: z.string(),
  pharmacy_id: z.string().optional().nullable(),
  prescriber_notes: z.string().optional().nullable(),
  prescription_date: z.string().optional(),
  provider_id: z.string(),
  quantity_to_dispense: z.string(),
  refills_authorized: z.number().optional(),
  route: z.string().optional().nullable(),
  sig: z.string().optional().nullable(),
  status: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPrescriptionsUpdateSchemaSchema = z.object({
  allow_substitutions: z.boolean().optional().nullable(),
  created_at: z.string().optional().nullable(),
  dosage_amount: z.number().optional().nullable(),
  dosage_unit: z.string().optional().nullable(),
  duration_days: z.number().optional().nullable(),
  frequency: z.string().optional().nullable(),
  id: z.string().optional(),
  patient_treatment_id: z.string().optional(),
  pharmacy_id: z.string().optional().nullable(),
  prescriber_notes: z.string().optional().nullable(),
  prescription_date: z.string().optional(),
  provider_id: z.string().optional(),
  quantity_to_dispense: z.string().optional(),
  refills_authorized: z.number().optional(),
  route: z.string().optional().nullable(),
  sig: z.string().optional().nullable(),
  status: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPrescriptionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("prescriptions_patient_treatment_id_fkey"),
    columns: z.tuple([z.literal("patient_treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("prescriptions_pharmacy_id_fkey"),
    columns: z.tuple([z.literal("pharmacy_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("pharmacies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("prescriptions_provider_id_fkey"),
    columns: z.tuple([z.literal("provider_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("providers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProductListingsRowSchemaSchema = z.object({
  cost: z.number().nullable(),
  created_at: z.string(),
  currency: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  last_checked_at: z.string().nullable(),
  product_global_variable_id: z.string(),
  provider_id: z.string().nullable(),
  purchase_url: z.string().nullable(),
  referral_fee_percentage: z.number().nullable(),
  referral_link: z.string().nullable(),
  seller_id: z.string(),
  updated_at: z.string(),
});

export const publicProductListingsInsertSchemaSchema = z.object({
  cost: z.number().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  last_checked_at: z.string().optional().nullable(),
  product_global_variable_id: z.string(),
  provider_id: z.string().optional().nullable(),
  purchase_url: z.string().optional().nullable(),
  referral_fee_percentage: z.number().optional().nullable(),
  referral_link: z.string().optional().nullable(),
  seller_id: z.string(),
  updated_at: z.string().optional(),
});

export const publicProductListingsUpdateSchemaSchema = z.object({
  cost: z.number().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  last_checked_at: z.string().optional().nullable(),
  product_global_variable_id: z.string().optional(),
  provider_id: z.string().optional().nullable(),
  purchase_url: z.string().optional().nullable(),
  referral_fee_percentage: z.number().optional().nullable(),
  referral_link: z.string().optional().nullable(),
  seller_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicProductListingsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "product_listings_product_global_variable_id_fkey",
    ),
    columns: z.tuple([z.literal("product_global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("global_variable_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("product_listings_provider_id_fkey"),
    columns: z.tuple([z.literal("provider_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("providers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("product_listings_seller_id_fkey"),
    columns: z.tuple([z.literal("seller_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("product_sellers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProductSellersRowSchemaSchema = z.object({
  created_at: z.string(),
  default_referral_fee_percentage: z.number().nullable(),
  id: z.string(),
  name: z.string(),
  updated_at: z.string(),
  website_url: z.string().nullable(),
});

export const publicProductSellersInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  default_referral_fee_percentage: z.number().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
  website_url: z.string().optional().nullable(),
});

export const publicProductSellersUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  default_referral_fee_percentage: z.number().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  website_url: z.string().optional().nullable(),
});

export const publicProductsRowSchemaSchema = z.object({
  brand_name: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  global_variable_id: z.string().nullable(),
  id: z.string(),
  manufacturer: z.string().nullable(),
  name: z.string(),
  product_type: publicProductTypeEnumSchema,
  upc: z.string().nullable(),
  updated_at: z.string(),
});

export const publicProductsInsertSchemaSchema = z.object({
  brand_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  global_variable_id: z.string().optional().nullable(),
  id: z.string().optional(),
  manufacturer: z.string().optional().nullable(),
  name: z.string(),
  product_type: publicProductTypeEnumSchema,
  upc: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicProductsUpdateSchemaSchema = z.object({
  brand_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  global_variable_id: z.string().optional().nullable(),
  id: z.string().optional(),
  manufacturer: z.string().optional().nullable(),
  name: z.string().optional(),
  product_type: publicProductTypeEnumSchema.optional(),
  upc: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicProductsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("products_global_variable_id_fkey"),
    columns: z.tuple([z.literal("global_variable_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilesRowSchemaSchema = z.object({
  avatar_url: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  email: z.string(),
  first_name: z.string().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
  timezone: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_type: publicUserRoleEnumSchema.nullable(),
});

export const publicProfilesInsertSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  email: z.string(),
  first_name: z.string().optional().nullable(),
  id: z.string(),
  last_name: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_type: publicUserRoleEnumSchema.optional().nullable(),
});

export const publicProfilesUpdateSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  email: z.string().optional(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_type: publicUserRoleEnumSchema.optional().nullable(),
});

export const publicProtocolVersionsRowSchemaSchema = z.object({
  approved_by: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  effective_date: z.string().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  schedule: jsonSchema,
  status: z.string(),
  trial_id: z.string(),
  updated_at: z.string().nullable(),
  version_number: z.number(),
});

export const publicProtocolVersionsInsertSchemaSchema = z.object({
  approved_by: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  effective_date: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  schedule: jsonSchema,
  status: z.string(),
  trial_id: z.string(),
  updated_at: z.string().optional().nullable(),
  version_number: z.number(),
});

export const publicProtocolVersionsUpdateSchemaSchema = z.object({
  approved_by: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  effective_date: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  schedule: jsonSchema.optional(),
  status: z.string().optional(),
  trial_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  version_number: z.number().optional(),
});

export const publicProtocolVersionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("protocol_versions_approved_by_fkey"),
    columns: z.tuple([z.literal("approved_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("protocol_versions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_eligible_trials_view"),
    referencedColumns: z.tuple([z.literal("trial_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("protocol_versions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trials"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProvidersRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  credentials: z.string().nullable(),
  id: z.string(),
  license_number: z.string().nullable(),
  license_state: z.string().nullable(),
  npi_number: z.string().nullable(),
  office_address: z.string().nullable(),
  office_phone: z.string().nullable(),
  specialty: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicProvidersInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  credentials: z.string().optional().nullable(),
  id: z.string(),
  license_number: z.string().optional().nullable(),
  license_state: z.string().optional().nullable(),
  npi_number: z.string().optional().nullable(),
  office_address: z.string().optional().nullable(),
  office_phone: z.string().optional().nullable(),
  specialty: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicProvidersUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  credentials: z.string().optional().nullable(),
  id: z.string().optional(),
  license_number: z.string().optional().nullable(),
  license_state: z.string().optional().nullable(),
  npi_number: z.string().optional().nullable(),
  office_address: z.string().optional().nullable(),
  office_phone: z.string().optional().nullable(),
  specialty: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicProvidersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("providers_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRegulatoryApprovalsRowSchemaSchema = z.object({
  agency: z.string(),
  created_at: z.string().nullable(),
  decision_date: z.string().nullable(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  indication: z.string().nullable(),
  notes: z.string().nullable(),
  region: z.string(),
  status: z.string(),
  treatment_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicRegulatoryApprovalsInsertSchemaSchema = z.object({
  agency: z.string(),
  created_at: z.string().optional().nullable(),
  decision_date: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  indication: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  region: z.string(),
  status: z.string(),
  treatment_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicRegulatoryApprovalsUpdateSchemaSchema = z.object({
  agency: z.string().optional(),
  created_at: z.string().optional().nullable(),
  decision_date: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  indication: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  region: z.string().optional(),
  status: z.string().optional(),
  treatment_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicRegulatoryApprovalsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("regulatory_approvals_treatment_id_fkey"),
    columns: z.tuple([z.literal("treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicReminderNotificationsRowSchemaSchema = z.object({
  completed_or_skipped_at: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  log_details: jsonSchema.nullable(),
  notification_trigger_at: z.string(),
  reminder_schedule_id: z.string(),
  status: publicReminderNotificationStatusSchema,
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicReminderNotificationsInsertSchemaSchema = z.object({
  completed_or_skipped_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  log_details: jsonSchema.optional().nullable(),
  notification_trigger_at: z.string(),
  reminder_schedule_id: z.string(),
  status: publicReminderNotificationStatusSchema.optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const publicReminderNotificationsUpdateSchemaSchema = z.object({
  completed_or_skipped_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  log_details: jsonSchema.optional().nullable(),
  notification_trigger_at: z.string().optional(),
  reminder_schedule_id: z.string().optional(),
  status: publicReminderNotificationStatusSchema.optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicReminderNotificationsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "reminder_notifications_reminder_schedule_id_fkey",
    ),
    columns: z.tuple([z.literal("reminder_schedule_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("reminder_schedules"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reminder_notifications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicReminderSchedulesRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  default_value: z.number().nullable(),
  end_date: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  next_trigger_at: z.string().nullable(),
  notification_message_template: z.string().nullable(),
  notification_title_template: z.string().nullable(),
  rrule: z.string(),
  start_date: z.string(),
  time_of_day: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
  user_variable_id: z.string(),
});

export const publicReminderSchedulesInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  default_value: z.number().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  next_trigger_at: z.string().optional().nullable(),
  notification_message_template: z.string().optional().nullable(),
  notification_title_template: z.string().optional().nullable(),
  rrule: z.string(),
  start_date: z.string().optional(),
  time_of_day: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
  user_variable_id: z.string(),
});

export const publicReminderSchedulesUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  default_value: z.number().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  next_trigger_at: z.string().optional().nullable(),
  notification_message_template: z.string().optional().nullable(),
  notification_title_template: z.string().optional().nullable(),
  rrule: z.string().optional(),
  start_date: z.string().optional(),
  time_of_day: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
  user_variable_id: z.string().optional(),
});

export const publicReminderSchedulesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reminder_schedules_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reminder_schedules_user_variable_id_fkey"),
    columns: z.tuple([z.literal("user_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicReportedSideEffectsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string(),
  id: z.string(),
  patient_treatment_id: z.string(),
  severity_out_of_ten: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const publicReportedSideEffectsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string(),
  id: z.string().optional(),
  patient_treatment_id: z.string(),
  severity_out_of_ten: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicReportedSideEffectsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional(),
  id: z.string().optional(),
  patient_treatment_id: z.string().optional(),
  severity_out_of_ten: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicReportedSideEffectsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "reported_side_effects_patient_treatment_id_fkey",
    ),
    columns: z.tuple([z.literal("patient_treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicResearchPartnersRowSchemaSchema = z.object({
  contact_email: z.string().nullable(),
  created_at: z.string().nullable(),
  department: z.string().nullable(),
  id: z.string(),
  institution_name: z.string(),
  is_institution: z.boolean(),
  research_focus_areas: z.array(z.string()).nullable(),
  updated_at: z.string().nullable(),
  website_url: z.string().nullable(),
});

export const publicResearchPartnersInsertSchemaSchema = z.object({
  contact_email: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  id: z.string(),
  institution_name: z.string(),
  is_institution: z.boolean().optional(),
  research_focus_areas: z.array(z.string()).optional().nullable(),
  updated_at: z.string().optional().nullable(),
  website_url: z.string().optional().nullable(),
});

export const publicResearchPartnersUpdateSchemaSchema = z.object({
  contact_email: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  id: z.string().optional(),
  institution_name: z.string().optional(),
  is_institution: z.boolean().optional(),
  research_focus_areas: z.array(z.string()).optional().nullable(),
  updated_at: z.string().optional().nullable(),
  website_url: z.string().optional().nullable(),
});

export const publicResearchPartnersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("research_partners_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTreatmentRatingsRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  effectiveness_out_of_ten: z.number().nullable(),
  helpful_count: z.number().nullable(),
  id: z.string(),
  patient_condition_id: z.string(),
  patient_treatment_id: z.string(),
  review: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicTreatmentRatingsInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  effectiveness_out_of_ten: z.number().optional().nullable(),
  helpful_count: z.number().optional().nullable(),
  id: z.string().optional(),
  patient_condition_id: z.string(),
  patient_treatment_id: z.string(),
  review: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicTreatmentRatingsUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  effectiveness_out_of_ten: z.number().optional().nullable(),
  helpful_count: z.number().optional().nullable(),
  id: z.string().optional(),
  patient_condition_id: z.string().optional(),
  patient_treatment_id: z.string().optional(),
  review: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicTreatmentRatingsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("treatment_ratings_patient_condition_id_fkey"),
    columns: z.tuple([z.literal("patient_condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_conditions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("treatment_ratings_patient_condition_id_fkey"),
    columns: z.tuple([z.literal("patient_condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_conditions_view"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("treatment_ratings_patient_treatment_id_fkey"),
    columns: z.tuple([z.literal("patient_treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTreatmentsRowSchemaSchema = z.object({
  active_ingredients: jsonSchema.nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  dosage_form: z.string().nullable(),
  dosage_instructions: z.string().nullable(),
  id: z.string(),
  manufacturer: z.string().nullable(),
  treatment_type: z.string(),
  updated_at: z.string().nullable(),
});

export const publicTreatmentsInsertSchemaSchema = z.object({
  active_ingredients: jsonSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  dosage_form: z.string().optional().nullable(),
  dosage_instructions: z.string().optional().nullable(),
  id: z.string(),
  manufacturer: z.string().optional().nullable(),
  treatment_type: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicTreatmentsUpdateSchemaSchema = z.object({
  active_ingredients: jsonSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  dosage_form: z.string().optional().nullable(),
  dosage_instructions: z.string().optional().nullable(),
  id: z.string().optional(),
  manufacturer: z.string().optional().nullable(),
  treatment_type: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicTreatmentsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("treatments_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrialActionsRowSchemaSchema = z.object({
  action_type_id: z.string(),
  cancellation_reason: z.string().nullable(),
  cancelled_at: z.string().nullable(),
  cancelled_by: z.string().nullable(),
  completed_at: z.string().nullable(),
  completed_by: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  due_date: z.string(),
  enrollment_id: z.string(),
  id: z.string(),
  is_protocol_required: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  parent_action_id: z.string().nullable(),
  priority: z.string(),
  protocol_version_id: z.string().nullable(),
  scheduled_date: z.string().nullable(),
  status: z.string(),
  title: z.string(),
  trial_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicTrialActionsInsertSchemaSchema = z.object({
  action_type_id: z.string(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  cancelled_by: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  completed_by: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  due_date: z.string(),
  enrollment_id: z.string(),
  id: z.string().optional(),
  is_protocol_required: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  parent_action_id: z.string().optional().nullable(),
  priority: z.string().optional(),
  protocol_version_id: z.string().optional().nullable(),
  scheduled_date: z.string().optional().nullable(),
  status: z.string(),
  title: z.string(),
  trial_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialActionsUpdateSchemaSchema = z.object({
  action_type_id: z.string().optional(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  cancelled_by: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  completed_by: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  due_date: z.string().optional(),
  enrollment_id: z.string().optional(),
  id: z.string().optional(),
  is_protocol_required: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  parent_action_id: z.string().optional().nullable(),
  priority: z.string().optional(),
  protocol_version_id: z.string().optional().nullable(),
  scheduled_date: z.string().optional().nullable(),
  status: z.string().optional(),
  title: z.string().optional(),
  trial_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialActionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("trial_actions_action_type_id_fkey"),
    columns: z.tuple([z.literal("action_type_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("action_types"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_cancelled_by_fkey"),
    columns: z.tuple([z.literal("cancelled_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_completed_by_fkey"),
    columns: z.tuple([z.literal("completed_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_enrollment_id_fkey"),
    columns: z.tuple([z.literal("enrollment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trial_enrollments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_parent_action_id_fkey"),
    columns: z.tuple([z.literal("parent_action_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("pending_actions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_parent_action_id_fkey"),
    columns: z.tuple([z.literal("parent_action_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trial_actions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_protocol_version_id_fkey"),
    columns: z.tuple([z.literal("protocol_version_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("protocol_versions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_eligible_trials_view"),
    referencedColumns: z.tuple([z.literal("trial_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trials"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrialEnrollmentsRowSchemaSchema = z.object({
  completion_date: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  enrollment_date: z.string().nullable(),
  id: z.string(),
  notes: z.string().nullable(),
  patient_id: z.string(),
  provider_id: z.string(),
  status: z.string(),
  trial_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicTrialEnrollmentsInsertSchemaSchema = z.object({
  completion_date: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  enrollment_date: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  patient_id: z.string(),
  provider_id: z.string(),
  status: z.string(),
  trial_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialEnrollmentsUpdateSchemaSchema = z.object({
  completion_date: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  enrollment_date: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  patient_id: z.string().optional(),
  provider_id: z.string().optional(),
  status: z.string().optional(),
  trial_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialEnrollmentsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("trial_enrollments_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_enrollments_provider_id_fkey"),
    columns: z.tuple([z.literal("provider_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_enrollments_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_eligible_trials_view"),
    referencedColumns: z.tuple([z.literal("trial_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_enrollments_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trials"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrialsRowSchemaSchema = z.object({
  compensation: z.number().nullable(),
  condition_id: z.string(),
  created_at: z.string().nullable(),
  current_enrollment: z.number().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  end_date: z.string().nullable(),
  enrollment_target: z.number().nullable(),
  exclusion_criteria: z.array(z.string()).nullable(),
  id: z.string(),
  inclusion_criteria: z.array(z.string()).nullable(),
  location: z.string().nullable(),
  phase: z.string().nullable(),
  research_partner_id: z.string(),
  start_date: z.string().nullable(),
  status: z.string(),
  title: z.string(),
  treatment_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicTrialsInsertSchemaSchema = z.object({
  compensation: z.number().optional().nullable(),
  condition_id: z.string(),
  created_at: z.string().optional().nullable(),
  current_enrollment: z.number().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  end_date: z.string().optional().nullable(),
  enrollment_target: z.number().optional().nullable(),
  exclusion_criteria: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  inclusion_criteria: z.array(z.string()).optional().nullable(),
  location: z.string().optional().nullable(),
  phase: z.string().optional().nullable(),
  research_partner_id: z.string(),
  start_date: z.string().optional().nullable(),
  status: z.string(),
  title: z.string(),
  treatment_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialsUpdateSchemaSchema = z.object({
  compensation: z.number().optional().nullable(),
  condition_id: z.string().optional(),
  created_at: z.string().optional().nullable(),
  current_enrollment: z.number().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  end_date: z.string().optional().nullable(),
  enrollment_target: z.number().optional().nullable(),
  exclusion_criteria: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  inclusion_criteria: z.array(z.string()).optional().nullable(),
  location: z.string().optional().nullable(),
  phase: z.string().optional().nullable(),
  research_partner_id: z.string().optional(),
  start_date: z.string().optional().nullable(),
  status: z.string().optional(),
  title: z.string().optional(),
  treatment_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicTrialsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("trials_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("conditions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trials_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_conditions_view"),
    referencedColumns: z.tuple([z.literal("condition_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trials_research_partner_id_fkey"),
    columns: z.tuple([z.literal("research_partner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trials_treatment_id_fkey"),
    columns: z.tuple([z.literal("treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUnitCategoriesRowSchemaSchema = z.object({
  base_unit_id: z.string().nullable(),
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  emoji: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  name: z.string(),
  updated_at: z.string().nullable(),
});

export const publicUnitCategoriesInsertSchemaSchema = z.object({
  base_unit_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicUnitCategoriesUpdateSchemaSchema = z.object({
  base_unit_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicUnitCategoriesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_unit_categories_base_unit"),
    columns: z.tuple([z.literal("base_unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUnitsRowSchemaSchema = z.object({
  abbreviated_name: z.string(),
  conversion_factor: z.number(),
  conversion_offset: z.number(),
  created_at: z.string().nullable(),
  emoji: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  name: z.string(),
  ucum_code: z.string().nullable(),
  unit_category_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicUnitsInsertSchemaSchema = z.object({
  abbreviated_name: z.string(),
  conversion_factor: z.number(),
  conversion_offset: z.number().optional(),
  created_at: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  ucum_code: z.string().optional().nullable(),
  unit_category_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicUnitsUpdateSchemaSchema = z.object({
  abbreviated_name: z.string().optional(),
  conversion_factor: z.number().optional(),
  conversion_offset: z.number().optional(),
  created_at: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  ucum_code: z.string().optional().nullable(),
  unit_category_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicUnitsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("units_unit_category_id_fkey"),
    columns: z.tuple([z.literal("unit_category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("unit_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUploadedFilesRowSchemaSchema = z.object({
  created_at: z.string(),
  file_name: z.string(),
  id: z.string(),
  mime_type: z.string(),
  size_bytes: z.number(),
  storage_path: z.string(),
  updated_at: z.string(),
  uploader_user_id: z.string(),
});

export const publicUploadedFilesInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  file_name: z.string(),
  id: z.string().optional(),
  mime_type: z.string(),
  size_bytes: z.number(),
  storage_path: z.string(),
  updated_at: z.string().optional(),
  uploader_user_id: z.string(),
});

export const publicUploadedFilesUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  file_name: z.string().optional(),
  id: z.string().optional(),
  mime_type: z.string().optional(),
  size_bytes: z.number().optional(),
  storage_path: z.string().optional(),
  updated_at: z.string().optional(),
  uploader_user_id: z.string().optional(),
});

export const publicUploadedFilesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("uploaded_files_uploader_user_id_fkey"),
    columns: z.tuple([z.literal("uploader_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserVariableImagesRowSchemaSchema = z.object({
  created_at: z.string(),
  is_primary: z.boolean(),
  uploaded_file_id: z.string(),
  user_variable_id: z.string(),
});

export const publicUserVariableImagesInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  is_primary: z.boolean().optional(),
  uploaded_file_id: z.string(),
  user_variable_id: z.string(),
});

export const publicUserVariableImagesUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  is_primary: z.boolean().optional(),
  uploaded_file_id: z.string().optional(),
  user_variable_id: z.string().optional(),
});

export const publicUserVariableImagesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_variable_images_uploaded_file_id_fkey"),
    columns: z.tuple([z.literal("uploaded_file_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("uploaded_files"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_variable_images_user_variable_id_fkey"),
    columns: z.tuple([z.literal("user_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserVariablesRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  deleted_at: z.string().nullable(),
  global_variable_id: z.string(),
  id: z.string(),
  preferred_unit_id: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicUserVariablesInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  global_variable_id: z.string(),
  id: z.string().optional(),
  preferred_unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicUserVariablesUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  global_variable_id: z.string().optional(),
  id: z.string().optional(),
  preferred_unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicUserVariablesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_variables_global_variable_id_fkey"),
    columns: z.tuple([z.literal("global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_variables_preferred_unit_id_fkey"),
    columns: z.tuple([z.literal("preferred_unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_variables_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicVariableCategoriesRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  display_order: z.number().nullable(),
  emoji: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  long_description: z.string().nullable(),
  name: z.string(),
  short_description: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicVariableCategoriesInsertSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  display_order: z.number().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string(),
  image_url: z.string().optional().nullable(),
  long_description: z.string().optional().nullable(),
  name: z.string(),
  short_description: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicVariableCategoriesUpdateSchemaSchema = z.object({
  created_at: z.string().optional().nullable(),
  display_order: z.number().optional().nullable(),
  emoji: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  long_description: z.string().optional().nullable(),
  name: z.string().optional(),
  short_description: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicVariableIngredientsRowSchemaSchema = z.object({
  created_at: z.string(),
  display_order: z.number().nullable(),
  id: z.string(),
  ingredient_global_variable_id: z.string(),
  is_active_ingredient: z.boolean(),
  parent_global_variable_id: z.string(),
  quantity_per_serving: z.number().nullable(),
  unit_id: z.string().nullable(),
  updated_at: z.string(),
});

export const publicVariableIngredientsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_order: z.number().optional().nullable(),
  id: z.string().optional(),
  ingredient_global_variable_id: z.string(),
  is_active_ingredient: z.boolean().optional(),
  parent_global_variable_id: z.string(),
  quantity_per_serving: z.number().optional().nullable(),
  unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicVariableIngredientsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_order: z.number().optional().nullable(),
  id: z.string().optional(),
  ingredient_global_variable_id: z.string().optional(),
  is_active_ingredient: z.boolean().optional(),
  parent_global_variable_id: z.string().optional(),
  quantity_per_serving: z.number().optional().nullable(),
  unit_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicVariableIngredientsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "variable_ingredients_ingredient_global_variable_id_fkey",
    ),
    columns: z.tuple([z.literal("ingredient_global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal(
      "variable_ingredients_parent_global_variable_id_fkey",
    ),
    columns: z.tuple([z.literal("parent_global_variable_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("variable_ingredients_unit_id_fkey"),
    columns: z.tuple([z.literal("unit_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("units"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPatientConditionsViewRowSchemaSchema = z.object({
  condition_id: z.string().nullable(),
  condition_name: z.string().nullable(),
  description: z.string().nullable(),
  diagnosed_at: z.string().nullable(),
  emoji: z.string().nullable(),
  icd_code: z.string().nullable(),
  id: z.string().nullable(),
  measurement_count: z.number().nullable(),
  notes: z.string().nullable(),
  patient_id: z.string().nullable(),
  severity: z.string().nullable(),
  status: z.string().nullable(),
});

export const publicPatientConditionsViewRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("conditions_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("global_variables"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_conditions_patient_id_fkey"),
    columns: z.tuple([z.literal("patient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patients"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPatientEligibleTrialsViewRowSchemaSchema = z.object({
  condition_name: z.string().nullable(),
  current_enrollment: z.number().nullable(),
  description: z.string().nullable(),
  end_date: z.string().nullable(),
  enrollment_target: z.number().nullable(),
  manufacturer: z.string().nullable(),
  patient_id: z.string().nullable(),
  phase: z.string().nullable(),
  research_partner_first_name: z.string().nullable(),
  research_partner_last_name: z.string().nullable(),
  start_date: z.string().nullable(),
  status: z.string().nullable(),
  title: z.string().nullable(),
  treatment_name: z.string().nullable(),
  treatment_type: z.string().nullable(),
  trial_id: z.string().nullable(),
});

export const publicPatientEligibleTrialsViewRelationshipsSchemaSchema = z.tuple(
  [
    z.object({
      foreignKeyName: z.literal("patient_conditions_patient_id_fkey"),
      columns: z.tuple([z.literal("patient_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("patients"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ],
);

export const publicPendingActionsRowSchemaSchema = z.object({
  action_category: publicActionCategorySchema.nullable(),
  action_type: z.string().nullable(),
  description: z.string().nullable(),
  due_date: z.string().nullable(),
  enrollment_id: z.string().nullable(),
  id: z.string().nullable(),
  is_protocol_required: z.boolean().nullable(),
  patient_name: z.string().nullable(),
  priority: z.string().nullable(),
  protocol_version: z.number().nullable(),
  provider_name: z.string().nullable(),
  scheduled_date: z.string().nullable(),
  status: z.string().nullable(),
  title: z.string().nullable(),
  trial_id: z.string().nullable(),
  trial_title: z.string().nullable(),
  urgency: z.string().nullable(),
});

export const publicPendingActionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("trial_actions_enrollment_id_fkey"),
    columns: z.tuple([z.literal("enrollment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trial_enrollments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_eligible_trials_view"),
    referencedColumns: z.tuple([z.literal("trial_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("trial_actions_trial_id_fkey"),
    columns: z.tuple([z.literal("trial_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("trials"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTreatmentRatingsStatsRowSchemaSchema = z.object({
  average_effectiveness: z.number().nullable(),
  condition_id: z.string().nullable(),
  negative_ratings_count: z.number().nullable(),
  neutral_ratings_count: z.number().nullable(),
  positive_ratings_count: z.number().nullable(),
  total_ratings: z.number().nullable(),
  treatment_id: z.string().nullable(),
});

export const publicTreatmentRatingsStatsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("patient_conditions_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("conditions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_conditions_condition_id_fkey"),
    columns: z.tuple([z.literal("condition_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("patient_conditions_view"),
    referencedColumns: z.tuple([z.literal("condition_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("patient_treatments_treatment_id_fkey"),
    columns: z.tuple([z.literal("treatment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("treatments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicConvertMeasurementValueArgsSchemaSchema = z.object({
  p_value: z.number(),
  p_from_unit_id: z.string(),
  p_to_unit_id: z.string(),
});

export const publicConvertMeasurementValueReturnsSchemaSchema = z.number();

export const publicGenerateProtocolActionsArgsSchemaSchema = z.object({
  enrollment_id: z.string(),
  protocol_version_id: z.string().optional(),
});

export const publicGenerateProtocolActionsReturnsSchemaSchema = z.array(
  z.object({
    action_type_id: z.string(),
    cancellation_reason: z.string().nullable(),
    cancelled_at: z.string().nullable(),
    cancelled_by: z.string().nullable(),
    completed_at: z.string().nullable(),
    completed_by: z.string().nullable(),
    created_at: z.string().nullable(),
    deleted_at: z.string().nullable(),
    description: z.string().nullable(),
    due_date: z.string(),
    enrollment_id: z.string(),
    id: z.string(),
    is_protocol_required: z.boolean().nullable(),
    metadata: jsonSchema.nullable(),
    parent_action_id: z.string().nullable(),
    priority: z.string(),
    protocol_version_id: z.string().nullable(),
    scheduled_date: z.string().nullable(),
    status: z.string(),
    title: z.string(),
    trial_id: z.string(),
    updated_at: z.string().nullable(),
  }),
);

export const publicGetAverageTreatmentRatingArgsSchemaSchema = z.object({
  p_treatment_id: z.string(),
  p_condition_id: z.string(),
});

export const publicGetAverageTreatmentRatingReturnsSchemaSchema = z.array(
  z.object({
    avg_effectiveness: z.number(),
    avg_side_effects: z.number(),
    total_ratings: z.number(),
  }),
);

export const publicIncrementHelpfulCountArgsSchemaSchema = z.object({
  p_rating_id: z.string(),
});

export const publicIncrementHelpfulCountReturnsSchemaSchema = z.undefined();
