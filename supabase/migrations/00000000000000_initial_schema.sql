-- Migration generated by combine-schema.js
-- Creates schemas and objects in dependency order

-- Create schemas
CREATE SCHEMA IF NOT EXISTS global;
CREATE SCHEMA IF NOT EXISTS core;
CREATE SCHEMA IF NOT EXISTS oauth2;
CREATE SCHEMA IF NOT EXISTS reference;
CREATE SCHEMA IF NOT EXISTS personal;
CREATE SCHEMA IF NOT EXISTS cohort;
CREATE SCHEMA IF NOT EXISTS models;
CREATE SCHEMA IF NOT EXISTS finance;
CREATE SCHEMA IF NOT EXISTS commerce;
CREATE SCHEMA IF NOT EXISTS logistics;
CREATE SCHEMA IF NOT EXISTS scheduling;

-- Types and Enums
-- global types
-- Global Types and Enums
--
-- Shared custom types and enums used across multiple tables
-- These types should be created before other migrations that reference them
--

-- Filling type for handling missing data
CREATE TYPE filling_type_enum AS ENUM (
    'zero',        -- Fill gaps with zero
    'none',        -- Leave gaps as is
    'interpolation', -- Use interpolation between points
    'value'         -- Use a specific value
);

-- Valence type for positive/negative indicators
CREATE TYPE valence_type_enum AS ENUM (
    'positive',  -- Higher values are better
    'negative',  -- Lower values are better
    'neutral'    -- No inherent good/bad value
);

-- Frequency type for occurrence patterns
CREATE TYPE frequency_type_enum AS ENUM (
    'always',    -- Consistently occurs
    'sometimes', -- Occasionally occurs
    'never'      -- Does not occur
);

-- Operation type for combining measurements
CREATE TYPE combination_operation_enum AS ENUM (
    'sum',  -- Add values together
    'mean'  -- Take average of values
);

-- Scale type for measurement scales
CREATE TYPE scale_type_enum AS ENUM (
    'nominal',   -- Categories with no order
    'ordinal',   -- Ordered categories
    'interval',  -- Equal intervals, no true zero
    'ratio'      -- Equal intervals with true zero
);

COMMENT ON TYPE filling_type_enum IS 'Specifies how periods of missing data should be treated';
COMMENT ON TYPE valence_type_enum IS 'Indicates whether higher or lower values are considered better';
COMMENT ON TYPE frequency_type_enum IS 'Describes how often something occurs or should occur';
COMMENT ON TYPE combination_operation_enum IS 'Specifies how multiple measurements should be combined';
COMMENT ON TYPE scale_type_enum IS 'Defines the type of measurement scale being used'; 

-- Tables (in dependency order)
-- Table: core.profiles

CREATE TABLE core.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    organization_name TEXT,
    contact_name TEXT,
    user_type TEXT NOT NULL CHECK (user_type IN ('patient', 'doctor', 'sponsor', 'admin')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE
);


-- Table: core.addresses

CREATE TABLE core.addresses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    address_type TEXT NOT NULL CHECK (address_type IN ('shipping', 'billing', 'both')),
    is_default BOOLEAN DEFAULT FALSE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    company TEXT,
    address_line1 TEXT NOT NULL,
    address_line2 TEXT,
    city TEXT NOT NULL,
    state TEXT NOT NULL,
    postal_code TEXT NOT NULL,
    country TEXT NOT NULL,
    phone TEXT,
    email TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: core.data_sharing_agreements

CREATE TABLE core.data_sharing_agreements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    description TEXT,
    agreement_text TEXT NOT NULL,
    version TEXT NOT NULL,
    effective_date TIMESTAMP WITH TIME ZONE NOT NULL,
    expiration_date TIMESTAMP WITH TIME ZONE,
    created_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE
);


-- Table: core.integration_providers

CREATE TABLE core.integration_providers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_name TEXT NOT NULL UNIQUE,
    display_name TEXT NOT NULL,
    description TEXT,
    logo_url TEXT,
    auth_type TEXT NOT NULL CHECK (auth_type IN ('oauth2', 'api_key', 'basic_auth')),
    oauth_config JSONB,
    api_base_url TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE
);


-- Table: core.integration_connections

CREATE TABLE core.integration_connections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    provider_id UUID NOT NULL REFERENCES core.integration_providers(id) ON DELETE CASCADE,
    auth_provider_id TEXT,
    auth_user_id TEXT,
    access_token TEXT,
    refresh_token TEXT,
    token_expires_at TIMESTAMP WITH TIME ZONE,
    connection_status TEXT NOT NULL CHECK (connection_status IN ('connected', 'disconnected', 'expired', 'revoked', 'error')),
    status_message TEXT,
    last_sync_at TIMESTAMP WITH TIME ZONE,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    UNIQUE(user_id, provider_id)
);


-- Table: core.integration_sync_logs

CREATE TABLE core.integration_sync_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    connection_id UUID NOT NULL REFERENCES core.integration_connections(id) ON DELETE CASCADE,
    sync_started_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    sync_completed_at TIMESTAMP WITH TIME ZONE,
    status TEXT NOT NULL CHECK (status IN ('in_progress', 'completed', 'failed')),
    data_types TEXT[],
    records_processed INTEGER DEFAULT 0,
    records_created INTEGER DEFAULT 0,
    records_updated INTEGER DEFAULT 0,
    records_failed INTEGER DEFAULT 0,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: core.tags

CREATE TABLE core.tags (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: core.tagged_items

CREATE TABLE core.tagged_items (
    tag_id UUID NOT NULL REFERENCES core.tags(id) ON DELETE CASCADE,
    item_type TEXT NOT NULL,
    item_id UUID NOT NULL,
    tagged_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    tagged_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    PRIMARY KEY (tag_id, item_type, item_id)
);


-- Table: core.user_consents

CREATE TABLE core.user_consents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    consent_type TEXT NOT NULL CHECK (consent_type IN ('data_collection', 'data_sharing', 'research_use', 'marketing', 'trial_participation')),
    protocol_id UUID, -- Will be referenced later
    consented BOOLEAN NOT NULL,
    consent_version TEXT NOT NULL,
    ip_address TEXT,
    consent_date TIMESTAMP WITH TIME ZONE NOT NULL,
    expiration_date TIMESTAMP WITH TIME ZONE,
    revocation_date TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    UNIQUE(user_id, consent_type, protocol_id, consent_version)
);


-- Table: core.user_data_exports

CREATE TABLE core.user_data_exports (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    requested_by UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    export_date TIMESTAMP WITH TIME ZONE NOT NULL,
    export_format TEXT NOT NULL,
    data_types TEXT[] NOT NULL,
    date_range_start TIMESTAMP WITH TIME ZONE,
    date_range_end TIMESTAMP WITH TIME ZONE,
    reason TEXT,
    ip_address TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: core.user_groups

CREATE TABLE core.user_groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: core.user_group_members

CREATE TABLE core.user_group_members (
    group_id UUID NOT NULL REFERENCES core.user_groups(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    role TEXT CHECK (role IN ('member', 'admin')),
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at TIMESTAMP WITH TIME ZONE,
    
    PRIMARY KEY (group_id, user_id)
);


-- Table: core.user_permissions

CREATE TABLE core.user_permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    permission VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: oauth2.clients

CREATE TABLE oauth2.clients (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    client_id TEXT NOT NULL UNIQUE,
    client_secret TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    homepage_url TEXT,
    logo_url TEXT,
    redirect_uris TEXT[] NOT NULL,
    grant_types TEXT[] NOT NULL,
    response_types TEXT[] NOT NULL,
    scope TEXT,
    owner_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    is_confidential BOOLEAN NOT NULL DEFAULT TRUE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: oauth2.access_tokens

CREATE TABLE oauth2.access_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    token TEXT NOT NULL UNIQUE,
    client_id UUID NOT NULL REFERENCES oauth2.clients(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    scope TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: oauth2.authorization_codes

CREATE TABLE oauth2.authorization_codes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    code TEXT NOT NULL UNIQUE,
    client_id UUID NOT NULL REFERENCES oauth2.clients(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    redirect_uri TEXT NOT NULL,
    scope TEXT,
    code_challenge TEXT,
    code_challenge_method TEXT CHECK (code_challenge_method IN ('plain', 'S256')),
    is_used BOOLEAN NOT NULL DEFAULT FALSE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: oauth2.refresh_tokens

CREATE TABLE oauth2.refresh_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    token TEXT NOT NULL UNIQUE,
    access_token_id UUID NOT NULL REFERENCES oauth2.access_tokens(id) ON DELETE CASCADE,
    is_revoked BOOLEAN NOT NULL DEFAULT FALSE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: oauth2.user_consents

CREATE TABLE oauth2.user_consents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    client_id UUID NOT NULL REFERENCES oauth2.clients(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    scope TEXT NOT NULL,
    granted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE,
    UNIQUE(client_id, user_id)
);


-- Table: reference.data_quality_rules

CREATE TABLE reference.data_quality_rules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    rule_type VARCHAR(50) NOT NULL,
    validation_function TEXT,
    error_message TEXT,
    severity VARCHAR(20) DEFAULT 'ERROR',
    applies_to_table VARCHAR(100),
    applies_to_column VARCHAR(100),
    parameters JSONB,
    is_active BOOLEAN DEFAULT true,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: reference.unit_categories

CREATE TABLE reference.unit_categories (
    id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    can_be_summed BOOLEAN NOT NULL DEFAULT false,
    sort_order INTEGER NOT NULL DEFAULT 0,
    ucum_dimension VARCHAR(20),
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

COMMENT ON COLUMN reference.unit_categories.ucum_dimension IS 'The UCUM/IUPAC dimension code (e.g., L for length, M for mass, T for time, etc.)';


-- Table: reference.units_of_measurement

CREATE TABLE reference.units_of_measurement (
    id VARCHAR(50) PRIMARY KEY,
    code VARCHAR(255),
    name VARCHAR(100) NOT NULL UNIQUE,
    descriptive_name VARCHAR(255),
    abbreviation VARCHAR(20),
    code_system VARCHAR(255),
    definition TEXT,
    synonym VARCHAR(255),
    status VARCHAR(50),
    kind_of_quantity VARCHAR(255),
    concept_id VARCHAR(255),
    dimension VARCHAR(255),
    unit_category_id VARCHAR(50) REFERENCES reference.unit_categories(id),
    minimum_value DECIMAL,
    maximum_value DECIMAL,
    maximum_daily_value DECIMAL,
    conversion_steps JSONB,
    filling_type filling_type_enum NOT NULL DEFAULT 'none',
    filling_value DECIMAL,
    scale scale_type_enum NOT NULL DEFAULT 'ratio',
    advanced BOOLEAN NOT NULL DEFAULT false,
    manual_tracking BOOLEAN NOT NULL DEFAULT true,
    sort_order INTEGER NOT NULL DEFAULT 0,
    slug VARCHAR(200) UNIQUE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: reference.variable_categories

CREATE TABLE reference.variable_categories (
    id INTEGER PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    name_singular VARCHAR(100),
    description TEXT,
    synonyms JSONB,  -- Changed from TEXT to JSONB
    slug VARCHAR(200) GENERATED ALWAYS AS (
        LOWER(REGEXP_REPLACE(name, '[^a-zA-Z0-9]+', '-', 'g'))
    ) STORED,
    
    -- UI/Display
    sort_order INTEGER DEFAULT 0,
    is_public BOOLEAN DEFAULT true,
    boring BOOLEAN DEFAULT false,
    
    -- Measurement constraints
    default_unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id) ON DELETE SET NULL,
    minimum_allowed_value DOUBLE PRECISION,
    maximum_allowed_value DOUBLE PRECISION,
    minimum_allowed_seconds_between_measurements INTEGER,
    filling_value DOUBLE PRECISION DEFAULT -1,
    filling_type filling_type_enum DEFAULT 'none',  -- Using existing enum
    
    -- Variable behavior
    duration_of_action INTEGER DEFAULT 86400,
    onset_delay INTEGER DEFAULT 0,
    combination_operation combination_operation_enum DEFAULT 'mean',
    
    -- Tracking settings
    manual_tracking BOOLEAN DEFAULT false,
    valence valence_type_enum DEFAULT 'neutral',
    is_goal frequency_type_enum DEFAULT 'never',
    controllable frequency_type_enum DEFAULT 'never',
    
    -- Relationship flags
    cause_only BOOLEAN DEFAULT false,
    effect_only BOOLEAN DEFAULT false,
    predictor BOOLEAN DEFAULT false,
    outcome BOOLEAN DEFAULT false,
    
    -- Timestamps
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: reference.variables

CREATE TABLE reference.variables (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(125) NOT NULL UNIQUE,
    number_of_user_variables INTEGER DEFAULT 0 NOT NULL,
    variable_category_id INTEGER NOT NULL REFERENCES reference.variable_categories(id),
    default_unit_id VARCHAR(50) NOT NULL REFERENCES reference.units_of_measurement(id),
    default_value DOUBLE PRECISION,
    cause_only BOOLEAN,
    client_id VARCHAR(80),
    combination_operation combination_operation_enum DEFAULT 'mean',
    common_alias VARCHAR(125),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    description TEXT,
    duration_of_action INTEGER,
    filling_value DOUBLE PRECISION DEFAULT -1,
    image_url VARCHAR(2083),
    informational_url VARCHAR(2083),
    ion_icon VARCHAR(40),
    maximum_allowed_value DOUBLE PRECISION,
    minimum_allowed_value DOUBLE PRECISION,
    most_common_original_unit_id VARCHAR(50),
    onset_delay INTEGER,
    outcome BOOLEAN,
    parent_id INTEGER REFERENCES reference.variables(id),
    price DOUBLE PRECISION,
    product_url VARCHAR(2083),
    status VARCHAR(25) DEFAULT 'WAITING' NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    most_common_connector_id INTEGER,
    synonyms VARCHAR(600),
    wikipedia_url VARCHAR(2083),
    brand_name VARCHAR(125),
    valence valence_type_enum DEFAULT 'neutral',
    wikipedia_title VARCHAR(100),
    upc_12 VARCHAR(255),
    upc_14 VARCHAR(255),
    deleted_at TIMESTAMPTZ,
    most_common_source_name VARCHAR(255),
    data_sources_count TEXT,
    optimal_value_message VARCHAR(500),
    best_cause_variable_id INTEGER REFERENCES reference.variables(id),
    best_effect_variable_id INTEGER REFERENCES reference.variables(id),
    common_maximum_allowed_daily_value DOUBLE PRECISION,
    common_minimum_allowed_daily_value DOUBLE PRECISION,
    common_minimum_allowed_non_zero_value DOUBLE PRECISION,
    minimum_allowed_seconds_between_measurements INTEGER,
    additional_meta_data TEXT,
    manual_tracking BOOLEAN,
    wp_post_id BIGINT,
    charts JSONB,
    creator_user_id UUID NOT NULL REFERENCES core.profiles(id),
    best_aggregate_correlation_id INTEGER,
    filling_type filling_type_enum DEFAULT 'none',
    deletion_reason VARCHAR(280),
    maximum_allowed_daily_value DOUBLE PRECISION,
    is_public BOOLEAN,
    sort_order INTEGER NOT NULL DEFAULT 0,
    is_goal frequency_type_enum DEFAULT 'never',
    controllable frequency_type_enum DEFAULT 'never',
    boring BOOLEAN,
    slug VARCHAR(200) UNIQUE,
    canonical_variable_id INTEGER REFERENCES reference.variables(id),
    predictor BOOLEAN,
    source_url VARCHAR(2083),
    string_id VARCHAR(125)
);

-- Add column comments
COMMENT ON COLUMN reference.variables.name IS 'User-defined variable display name';
COMMENT ON COLUMN reference.variables.number_of_user_variables IS 'Number of variables';
COMMENT ON COLUMN reference.variables.cause_only IS 'A value of true indicates that this variable is generally a cause in a causal relationship. An example would be Cloud Cover which would generally not be influenced by user behavior';
COMMENT ON COLUMN reference.variables.combination_operation IS 'How to combine values of this variable (for instance, to see a summary of the values over a month)';
COMMENT ON COLUMN reference.variables.duration_of_action IS 'How long the effect of a measurement in this variable lasts';
COMMENT ON COLUMN reference.variables.filling_value IS 'Value for replacing null measurements';
COMMENT ON COLUMN reference.variables.maximum_allowed_value IS 'Maximum reasonable value for a single measurement for this variable in the default unit';
COMMENT ON COLUMN reference.variables.minimum_allowed_value IS 'Minimum reasonable value for this variable (uses default unit)';
COMMENT ON COLUMN reference.variables.most_common_original_unit_id IS 'Most common Unit ID';
COMMENT ON COLUMN reference.variables.onset_delay IS 'How long it takes for a measurement in this variable to take effect';
COMMENT ON COLUMN reference.variables.outcome IS 'Outcome variables are those for which a human would generally want to identify influencing factors. These include symptoms, physique, mood, cognitive performance, etc.';
COMMENT ON COLUMN reference.variables.parent_id IS 'ID of the parent variable if this variable has any parent';
COMMENT ON COLUMN reference.variables.price IS 'Price';
COMMENT ON COLUMN reference.variables.product_url IS 'Product URL';
COMMENT ON COLUMN reference.variables.status IS 'status';
COMMENT ON COLUMN reference.variables.synonyms IS 'The primary variable name and any synonyms for it. This field should be used for non-specific variable searches.';
COMMENT ON COLUMN reference.variables.data_sources_count IS 'Array of connector or client measurement data source names as key with number of users as value';
COMMENT ON COLUMN reference.variables.deletion_reason IS 'The reason the variable was deleted';
COMMENT ON COLUMN reference.variables.maximum_allowed_daily_value IS 'The maximum allowed value in the default unit for measurements aggregated over a single day';
COMMENT ON COLUMN reference.variables.is_goal IS 'The effect of a food on symptom severity is useful because you can control the predictor directly. However, the effect of a symptom on foods eaten is not very useful';
COMMENT ON COLUMN reference.variables.controllable IS 'You can control foods eaten directly. However, symptom severity or weather is not directly controllable';
COMMENT ON COLUMN reference.variables.boring IS 'The variable is boring if the average person would not be interested in its causes or effects';
COMMENT ON COLUMN reference.variables.slug IS 'The slug is the part of a URL that identifies a page in human-readable keywords';
COMMENT ON COLUMN reference.variables.canonical_variable_id IS 'If a variable duplicates another but with a different name, set the canonical variable id to match the variable with the more appropriate name';
COMMENT ON COLUMN reference.variables.predictor IS 'predictor is true if the variable is a factor that could influence an outcome of interest';
COMMENT ON COLUMN reference.variables.source_url IS 'URL for the website related to the database containing the info that was used to create this variable';


-- Table: reference.lab_test_types

CREATE TABLE reference.lab_test_types (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name text NOT NULL UNIQUE,
    display_name text NOT NULL,
    description text,
    variable_id bigint REFERENCES reference.variables(id),
    loinc_code text UNIQUE,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: reference.population_segments

CREATE TABLE reference.population_segments (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name text NOT NULL UNIQUE,
    display_name text NOT NULL,
    description text,
    age_min numeric,
    age_max numeric,
    condition_variable_id bigint REFERENCES reference.variables(id),
    demographic_filters jsonb,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: reference.variable_ingredients

CREATE TABLE reference.variable_ingredients (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    parent_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    ingredient_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    amount numeric,                    -- Specific amount of the ingredient
    unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id) ON DELETE RESTRICT,
    proportion DECIMAL,                -- Alternative to amount/unit for relative proportions
    is_active_ingredient BOOLEAN DEFAULT FALSE,  -- Particularly relevant for medications
    version_number INTEGER NOT NULL DEFAULT 1,   -- For tracking formulation changes
    source_type text NOT NULL CHECK (source_type IN ('reference', 'user', 'expert', 'aggregate')),
    source_id bigint,                    -- ID of the user/expert who contributed this
    confidence_score float CHECK (confidence_score >= 0 AND confidence_score <= 1),
    notes text,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(parent_variable_id, ingredient_variable_id, version_number, source_type),
    CONSTRAINT no_self_reference CHECK (parent_variable_id != ingredient_variable_id)
);


-- Table: reference.variable_synonyms

CREATE TABLE reference.variable_synonyms (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    variable_id bigint NOT NULL REFERENCES reference.variables(id),
    name text NOT NULL,                -- Alternative name or translation
    language_code text NOT NULL DEFAULT 'en',  -- ISO 639-1 language code
    source_type text NOT NULL CHECK (source_type IN ('reference', 'user', 'expert', 'aggregate')),
    source_id bigint,                    -- ID of the user/expert who contributed this
    confidence_score float CHECK (confidence_score >= 0 AND confidence_score <= 1),
    notes text,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(variable_id, name, language_code)
);


-- Table: personal.measurements

CREATE TABLE personal.measurements (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id uuid NOT NULL REFERENCES core.profiles(id),
    variable_id bigint NOT NULL REFERENCES reference.variables(id),
    value numeric NOT NULL,
    unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id),
    source_type text NOT NULL CHECK (source_type IN ('manual', 'import', 'api', 'device', 'calculation')),
    source_id text,                    -- External identifier for imported/API data
    timestamp timestamptz NOT NULL,    -- When the measurement was taken
    timezone text,                     -- User's timezone when measurement was taken
    location point,                    -- Optional location data
    notes text,                        -- Any additional notes
    metadata jsonb,                    -- Flexible metadata storage
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: personal.user_conditions

CREATE TABLE personal.user_conditions (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id uuid NOT NULL REFERENCES core.profiles(id),
    condition_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    onset_at timestamptz NOT NULL,
    resolution_at timestamptz,
    status text NOT NULL CHECK (status IN ('active', 'resolved', 'recurring')),
    severity integer CHECK (severity BETWEEN 1 AND 5),
    notes text,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, condition_variable_id, onset_at)
);


-- Table: personal.user_documents

CREATE TABLE personal.user_documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    document_type VARCHAR(50),
    storage_path TEXT NOT NULL,
    mime_type VARCHAR(100),
    file_size INTEGER,
    document_date TIMESTAMP WITH TIME ZONE,
    provider_name TEXT,
    facility_name TEXT,
    tags TEXT[],
    notes TEXT,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: personal.user_external_treatment_effectiveness_ratings

CREATE TABLE personal.user_external_treatment_effectiveness_ratings (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id uuid NOT NULL REFERENCES core.profiles(id),
    treatment_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    condition_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    source_type text NOT NULL CHECK (source_type IN ('doctor', 'research', 'anecdotal')),
    source_name text,
    source_url text,
    effectiveness_rating text CHECK (effectiveness_rating IN ('much_worse', 'worse', 'no_effect', 'better', 'much_better')),
    side_effects_rating text CHECK (side_effects_rating IN ('none', 'mild', 'moderate', 'severe', 'intolerable')),
    confidence_level text CHECK (confidence_level IN ('low', 'medium', 'high')),
    notes text,
    is_public boolean NOT NULL DEFAULT false,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, treatment_variable_id, condition_variable_id, source_type, source_name)
);


-- Table: personal.user_lab_results

CREATE TABLE personal.user_lab_results (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    lab_test_type_id bigint NOT NULL REFERENCES reference.lab_test_types(id),
    value DECIMAL,
    unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id),
    status VARCHAR(20),
    specimen_type VARCHAR(50),
    collection_at TIMESTAMP WITH TIME ZONE,
    result_at TIMESTAMP WITH TIME ZONE,
    lab_name TEXT,
    notes TEXT,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: personal.user_treatment_effectiveness_ratings

CREATE TABLE personal.user_treatment_effectiveness_ratings (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id uuid NOT NULL REFERENCES core.profiles(id),
    treatment_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    condition_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    effectiveness_rating text CHECK (effectiveness_rating IN ('much_worse', 'worse', 'no_effect', 'better', 'much_better')),
    side_effects_rating text CHECK (side_effects_rating IN ('none', 'mild', 'moderate', 'severe', 'intolerable')),
    adherence_rating text CHECK (adherence_rating IN ('never', 'rarely', 'sometimes', 'usually', 'always')),
    cost_rating text CHECK (cost_rating IN ('very_expensive', 'expensive', 'moderate', 'affordable', 'very_affordable')),
    notes text,
    is_public boolean NOT NULL DEFAULT false,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, treatment_variable_id, condition_variable_id)
);


-- Table: personal.user_variables

CREATE TABLE personal.user_variables (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id uuid NOT NULL REFERENCES core.profiles(id),
    variable_id bigint NOT NULL REFERENCES reference.variables(id),
    display_name text,
    description text,
    unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id),
    default_value numeric,
    minimum_value numeric,
    maximum_value numeric,
    filling_type filling_type_enum DEFAULT 'none',
    joining_type combination_operation_enum DEFAULT 'mean',
    onset_delay interval,
    duration_of_action interval,
    measurement_source text,
    measurement_method text,
    last_processed_at timestamptz,
    analysis_settings jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, variable_id)
);


-- Table: cohort.trials

CREATE TABLE cohort.trials (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    title text NOT NULL,
    description text,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    status text NOT NULL DEFAULT 'draft',
    oauth_client_id uuid REFERENCES oauth2.clients(id),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id),
    updated_by uuid REFERENCES auth.users(id)
);


-- Table: cohort.trial_arms

CREATE TABLE cohort.trial_arms (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    trial_id uuid REFERENCES cohort.trials(id) ON DELETE CASCADE NOT NULL,
    name text NOT NULL,
    description text,
    type text NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by uuid REFERENCES auth.users(id),
    updated_by uuid REFERENCES auth.users(id)
);


-- Table: cohort.trial_participants

CREATE TABLE cohort.trial_participants (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    trial_id UUID NOT NULL REFERENCES cohort.trials(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    trial_arm_id UUID REFERENCES cohort.trial_arms(id) ON DELETE SET NULL,
    enrollment_date DATE NOT NULL,
    withdrawal_date DATE,
    withdrawal_reason TEXT,
    status TEXT CHECK (status IN ('screening', 'enrolled', 'active', 'completed', 'withdrawn', 'excluded')),
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(trial_id, user_id)
);


-- Table: cohort.adverse_events

CREATE TABLE cohort.adverse_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    participant_id UUID NOT NULL REFERENCES cohort.trial_participants(id) ON DELETE CASCADE,
    variable_id bigint NOT NULL REFERENCES reference.variables(id) ON DELETE CASCADE,
    onset_date TIMESTAMP WITH TIME ZONE NOT NULL,
    resolution_date TIMESTAMP WITH TIME ZONE,
    severity TEXT CHECK (severity IN ('mild', 'moderate', 'severe', 'life_threatening', 'death')),
    relatedness TEXT CHECK (relatedness IN ('unrelated', 'unlikely', 'possible', 'probable', 'definite')),
    is_serious BOOLEAN DEFAULT FALSE,
    action_taken TEXT,
    outcome TEXT,
    notes TEXT,
    reported_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: cohort.interventions

CREATE TABLE cohort.interventions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    arm_id UUID NOT NULL REFERENCES cohort.trial_arms(id) ON DELETE CASCADE,
    variable_id bigint NOT NULL REFERENCES reference.variables(id) ON DELETE CASCADE,
    dosage DECIMAL,
    unit_id VARCHAR(50) REFERENCES reference.units_of_measurement(id) ON DELETE RESTRICT,
    frequency TEXT,
    duration TEXT,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: cohort.protocols

CREATE TABLE cohort.protocols (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    hypothesis TEXT,
    study_type TEXT NOT NULL,
    phase TEXT CHECK (phase IN ('0', '1', '2', '3', '4', 'n/a')),
    status TEXT CHECK (status IN ('draft', 'pending_review', 'approved', 'active', 'completed', 'terminated', 'withdrawn')),
    start_date DATE,
    end_date DATE,
    target_participants INTEGER,
    inclusion_criteria TEXT[],
    exclusion_criteria TEXT[],
    created_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    approved_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    approval_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: cohort.outcomes

CREATE TABLE cohort.outcomes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    protocol_id UUID NOT NULL REFERENCES cohort.protocols(id) ON DELETE CASCADE,
    variable_id bigint NOT NULL REFERENCES reference.variables(id) ON DELETE CASCADE,
    outcome_type TEXT CHECK (outcome_type IN ('primary', 'secondary', 'exploratory')),
    measurement_schedule TEXT,
    target_difference DECIMAL,
    statistical_power DECIMAL,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: cohort.trial_documents

CREATE TABLE cohort.trial_documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    trial_id UUID NOT NULL REFERENCES cohort.trials(id) ON DELETE CASCADE,
    document_type TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    file_path TEXT NOT NULL,
    version TEXT,
    is_current_version BOOLEAN DEFAULT TRUE,
    uploaded_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: cohort.trial_measurements

CREATE TABLE cohort.trial_measurements (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    trial_id uuid REFERENCES cohort.trials(id) ON DELETE CASCADE NOT NULL,
    measurement_id bigint REFERENCES personal.measurements(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by uuid REFERENCES auth.users(id),
    updated_by uuid REFERENCES auth.users(id),
    UNIQUE(trial_id, measurement_id)
);


-- Table: cohort.trial_phases

CREATE TABLE cohort.trial_phases (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    trial_id uuid REFERENCES cohort.trials(id) ON DELETE CASCADE NOT NULL,
    name text NOT NULL,
    description text,
    start_date TIMESTAMP WITH TIME ZONE,
    end_date TIMESTAMP WITH TIME ZONE,
    sequence_order integer NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by uuid REFERENCES auth.users(id),
    updated_by uuid REFERENCES auth.users(id)
);


-- Table: models.parameter_sets

CREATE TABLE models.parameter_sets (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name text NOT NULL UNIQUE,
    display_name text NOT NULL,
    description text,
    parameters jsonb NOT NULL,
    scenario_type text NOT NULL CHECK (scenario_type IN ('base', 'best', 'worst')),
    -- Time value parameters
    time_horizon_years integer NOT NULL,
    discount_rate numeric NOT NULL,
    inflation_rate numeric,
    present_value_factor numeric NOT NULL,
    metadata jsonb,
    is_baseline boolean DEFAULT false,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: models.simulation_outputs

CREATE TABLE models.simulation_outputs (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    run_name text NOT NULL,
    run_timestamp timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    parameter_set_id bigint NOT NULL REFERENCES models.parameter_sets(id),
    population_segment_id bigint NOT NULL REFERENCES reference.population_segments(id),
    intervention_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    outcome_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    time_point timestamptz NOT NULL,
    value numeric NOT NULL,
    -- QALY specific fields
    is_qaly_calculation boolean DEFAULT false,
    qaly_type text CHECK (
        NOT is_qaly_calculation OR 
        qaly_type IN ('lifetime', 'annual', 'incremental')
    ),
    base_life_expectancy numeric,
    quality_adjustment_factor numeric CHECK (
        NOT is_qaly_calculation OR 
        quality_adjustment_factor BETWEEN 0 AND 1
    ),
    total_qalys numeric,
    qaly_monetary_value numeric,
    -- Common fields
    confidence_interval_low numeric,
    confidence_interval_high numeric,
    calculation_method text,
    assumptions text[],
    limitations text,
    metadata jsonb,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_qaly_fields CHECK (
        (is_qaly_calculation AND qaly_type IS NOT NULL AND base_life_expectancy IS NOT NULL 
         AND quality_adjustment_factor IS NOT NULL AND total_qalys IS NOT NULL 
         AND qaly_monetary_value IS NOT NULL)
        OR
        (NOT is_qaly_calculation AND qaly_type IS NULL AND base_life_expectancy IS NULL 
         AND quality_adjustment_factor IS NULL AND total_qalys IS NULL 
         AND qaly_monetary_value IS NULL)
    )
);


-- Table: models.cost_breakdowns

CREATE TABLE models.cost_breakdowns (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    simulation_output_id bigint NOT NULL REFERENCES models.simulation_outputs(id),
    cost_category text NOT NULL,
    subcategory text,
    amount numeric NOT NULL,
    percentage_of_total numeric NOT NULL CHECK (percentage_of_total BETWEEN 0 AND 100),
    population_segment_id bigint REFERENCES reference.population_segments(id),
    age_group text,
    calculation_notes text,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_cost_category CHECK (
        cost_category IN (
            'healthcare_savings',
            'productivity_gains',
            'qaly_value',
            'medicare_impact',
            'long_term_savings'
        )
    )
);


-- Table: models.intervention_effects

CREATE TABLE models.intervention_effects (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    intervention_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    outcome_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    population_segment_id bigint NOT NULL REFERENCES reference.population_segments(id),
    parameter_set_id bigint NOT NULL REFERENCES models.parameter_sets(id),
    effect_type text NOT NULL CHECK (effect_type IN ('relative_risk', 'absolute_change', 'percent_change', 'odds_ratio')),
    effect_size numeric NOT NULL,
    confidence_interval_low numeric,
    confidence_interval_high numeric,
    time_horizon_months integer,
    evidence_level text,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: models.model_equations

CREATE TABLE models.model_equations (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name text NOT NULL UNIQUE,
    display_name text NOT NULL,
    description text,
    equation_type text NOT NULL CHECK (equation_type IN ('differential', 'algebraic', 'statistical', 'machine_learning', 'other')),
    equation_latex text NOT NULL,
    equation_code text,
    input_variables bigint[] NOT NULL, -- Array of variables ids used as inputs
    output_variable_id bigint NOT NULL REFERENCES reference.variables(id),
    parameter_set_id bigint REFERENCES models.parameter_sets(id),
    validation_rules jsonb,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_input_variables CHECK (array_length(input_variables, 1) > 0)
);


-- Table: models.parameter_sources

CREATE TABLE models.parameter_sources (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    parameter_set_id bigint REFERENCES models.parameter_sets(id),
    intervention_effect_id bigint REFERENCES models.intervention_effects(id),
    source_type text NOT NULL CHECK (source_type IN ('paper', 'dataset', 'expert_opinion', 'meta_analysis', 'clinical_trial', 'other')),
    citation text NOT NULL,
    url text,
    doi text,
    publication_date date,
    authors text[],
    quality_score numeric CHECK (quality_score BETWEEN 0 AND 1),
    methodology_notes text,
    limitations text,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT parameter_source_reference CHECK (
        (parameter_set_id IS NOT NULL AND intervention_effect_id IS NULL) OR
        (parameter_set_id IS NULL AND intervention_effect_id IS NOT NULL)
    )
);


-- Table: models.population_demographics

CREATE TABLE models.population_demographics (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    population_segment_id bigint NOT NULL REFERENCES reference.population_segments(id),
    parameter_set_id bigint NOT NULL REFERENCES models.parameter_sets(id),
    age_group text NOT NULL,
    percentage numeric NOT NULL CHECK (percentage BETWEEN 0 AND 100),
    risk_multiplier numeric NOT NULL DEFAULT 1.0,
    population_count bigint,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);


-- Table: models.statistical_validation

CREATE TABLE models.statistical_validation (
    id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    simulation_output_id bigint NOT NULL REFERENCES models.simulation_outputs(id),
    analysis_method text NOT NULL,
    covariates text[] NOT NULL,
    statistical_tests jsonb NOT NULL,
    confidence_level numeric NOT NULL CHECK (confidence_level BETWEEN 0 AND 1),
    p_value numeric,
    sample_size bigint,
    power_analysis jsonb,
    methodology_notes text,
    limitations text,
    metadata jsonb,
    deleted_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_analysis_method CHECK (
        analysis_method IN (
            'poisson_regression',
            'cox_proportional_hazards',
            'linear_regression',
            'logistic_regression',
            'mixed_effects_model',
            'other'
        )
    )
);


-- Table: finance.credits

CREATE TABLE finance.credits (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    amount DECIMAL NOT NULL CHECK (amount >= 0),
    currency TEXT NOT NULL DEFAULT 'USD',
    credit_type TEXT NOT NULL CHECK (credit_type IN ('refund', 'promotion', 'compensation')),
    status TEXT NOT NULL CHECK (status IN ('active', 'used', 'expired')),
    expiry_date DATE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: finance.credit_transactions

CREATE TABLE finance.credit_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    credit_id UUID NOT NULL REFERENCES finance.credits(id) ON DELETE CASCADE,
    amount DECIMAL NOT NULL CHECK (amount >= 0),
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('apply', 'refund')),
    reference_type TEXT,
    reference_id UUID,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: finance.payment_methods

CREATE TABLE finance.payment_methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    payment_type TEXT NOT NULL CHECK (payment_type IN ('credit_card', 'bank_account', 'digital_wallet')),
    provider TEXT NOT NULL,
    account_last4 TEXT NOT NULL,
    expiry_date DATE,
    is_default BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    billing_address_id UUID REFERENCES core.addresses(id),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: finance.subscriptions

CREATE TABLE finance.subscriptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    plan_name TEXT NOT NULL,
    status TEXT NOT NULL CHECK (status IN ('active', 'cancelled', 'expired', 'past_due')),
    amount DECIMAL NOT NULL CHECK (amount >= 0),
    currency TEXT NOT NULL DEFAULT 'USD',
    billing_period TEXT NOT NULL CHECK (billing_period IN ('monthly', 'quarterly', 'annual')),
    start_date DATE NOT NULL,
    end_date DATE,
    next_billing_date DATE,
    payment_method_id UUID REFERENCES finance.payment_methods(id),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_subscription_dates CHECK (
        start_date <= end_date
        AND (next_billing_date IS NULL OR next_billing_date >= start_date)
    )
);


-- Table: finance.subscription_items

CREATE TABLE finance.subscription_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    subscription_id UUID NOT NULL REFERENCES finance.subscriptions(id) ON DELETE CASCADE,
    item_type TEXT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL NOT NULL CHECK (unit_price >= 0),
    amount DECIMAL NOT NULL CHECK (amount >= 0),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: finance.transactions

CREATE TABLE finance.transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('payment', 'refund', 'credit', 'debit')),
    amount DECIMAL NOT NULL,
    currency TEXT NOT NULL DEFAULT 'USD',
    status TEXT NOT NULL CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
    payment_method_id UUID REFERENCES finance.payment_methods(id),
    reference_type TEXT,
    reference_id UUID,
    description TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: commerce.products

CREATE TABLE commerce.products (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    variable_id bigint NOT NULL REFERENCES reference.variables(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    short_description TEXT,
    sku TEXT UNIQUE,
    price DECIMAL NOT NULL CHECK (price >= 0),
    sale_price DECIMAL CHECK (sale_price >= 0),
    sale_start_date TIMESTAMP WITH TIME ZONE,
    sale_end_date TIMESTAMP WITH TIME ZONE,
    stock_quantity INTEGER NOT NULL DEFAULT 0,
    low_stock_threshold INTEGER DEFAULT 5,
    is_active BOOLEAN DEFAULT TRUE,
    is_featured BOOLEAN DEFAULT FALSE,
    requires_prescription BOOLEAN DEFAULT FALSE,
    manufacturer TEXT,
    brand TEXT,
    tags TEXT[],
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_sale_dates CHECK (sale_start_date IS NULL OR sale_end_date IS NULL OR sale_start_date <= sale_end_date),
    CONSTRAINT valid_sale_price CHECK (sale_price IS NULL OR sale_price <= price)
);


-- Table: commerce.cart_items

CREATE TABLE commerce.cart_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, product_id)
);


-- Table: commerce.discounts

CREATE TABLE commerce.discounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    code TEXT NOT NULL UNIQUE,
    description TEXT,
    discount_type TEXT NOT NULL CHECK (discount_type IN ('percentage', 'fixed_amount')),
    discount_value DECIMAL NOT NULL CHECK (discount_value >= 0),
    minimum_purchase_amount DECIMAL CHECK (minimum_purchase_amount >= 0),
    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date TIMESTAMP WITH TIME ZONE,
    usage_limit INTEGER,
    times_used INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_discount_dates CHECK (end_date IS NULL OR start_date <= end_date)
);


-- Table: commerce.orders

CREATE TABLE commerce.orders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    order_number TEXT NOT NULL UNIQUE,
    status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded')),
    total_amount DECIMAL NOT NULL CHECK (total_amount >= 0),
    shipping_amount DECIMAL NOT NULL DEFAULT 0 CHECK (shipping_amount >= 0),
    tax_amount DECIMAL NOT NULL DEFAULT 0 CHECK (tax_amount >= 0),
    discount_amount DECIMAL NOT NULL DEFAULT 0 CHECK (discount_amount >= 0),
    shipping_address_id UUID NOT NULL REFERENCES core.addresses(id),
    billing_address_id UUID NOT NULL REFERENCES core.addresses(id),
    payment_intent_id TEXT,
    payment_status TEXT CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded')),
    notes TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: commerce.order_items

CREATE TABLE commerce.order_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL REFERENCES commerce.orders(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL NOT NULL CHECK (unit_price >= 0),
    total_price DECIMAL NOT NULL CHECK (total_price >= 0),
    discount_amount DECIMAL NOT NULL DEFAULT 0 CHECK (discount_amount >= 0),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: commerce.product_images

CREATE TABLE commerce.product_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    url TEXT NOT NULL,
    alt_text TEXT,
    is_primary BOOLEAN DEFAULT FALSE,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(product_id, url)
);


-- Table: commerce.product_reviews

CREATE TABLE commerce.product_reviews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
    title TEXT,
    review_text TEXT,
    is_verified_purchase BOOLEAN DEFAULT FALSE,
    is_approved BOOLEAN DEFAULT FALSE,
    approved_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(product_id, user_id)
);


-- Table: commerce.wishlists

CREATE TABLE commerce.wishlists (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    is_public BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: commerce.wishlist_items

CREATE TABLE commerce.wishlist_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    wishlist_id UUID NOT NULL REFERENCES commerce.wishlists(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(wishlist_id, product_id)
);


-- Table: logistics.warehouses

CREATE TABLE logistics.warehouses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    address_id UUID NOT NULL REFERENCES core.addresses(id),
    contact_name TEXT,
    contact_email TEXT,
    contact_phone TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: logistics.inventory

CREATE TABLE logistics.inventory (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    warehouse_id UUID NOT NULL REFERENCES logistics.warehouses(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES commerce.products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL DEFAULT 0,
    reserved_quantity INTEGER NOT NULL DEFAULT 0,
    reorder_point INTEGER,
    reorder_quantity INTEGER,
    bin_location TEXT,
    last_count_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(warehouse_id, product_id),
    CONSTRAINT valid_quantities CHECK (
        quantity >= 0 AND
        reserved_quantity >= 0 AND
        reserved_quantity <= quantity
    )
);


-- Table: logistics.inventory_transactions

CREATE TABLE logistics.inventory_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    inventory_id UUID NOT NULL REFERENCES logistics.inventory(id) ON DELETE CASCADE,
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('receipt', 'shipment', 'adjustment', 'transfer', 'return')),
    quantity INTEGER NOT NULL,
    reference_type TEXT,
    reference_id UUID,
    notes TEXT,
    performed_by UUID REFERENCES core.profiles(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: logistics.returns

CREATE TABLE logistics.returns (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL REFERENCES commerce.orders(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES core.profiles(id),
    status TEXT NOT NULL CHECK (status IN ('pending', 'approved', 'received', 'inspected', 'completed', 'rejected')),
    return_reason TEXT NOT NULL,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: logistics.return_items

CREATE TABLE logistics.return_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    return_id UUID NOT NULL REFERENCES logistics.returns(id) ON DELETE CASCADE,
    order_item_id UUID NOT NULL REFERENCES commerce.order_items(id),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    condition TEXT NOT NULL CHECK (condition IN ('new', 'like_new', 'used', 'damaged')),
    reason_details TEXT,
    refund_amount DECIMAL CHECK (refund_amount >= 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(return_id, order_item_id)
);


-- Table: logistics.shipping_methods

CREATE TABLE logistics.shipping_methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    estimated_days_min INTEGER NOT NULL,
    estimated_days_max INTEGER NOT NULL,
    is_active BOOLEAN DEFAULT true,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: logistics.shipments

CREATE TABLE logistics.shipments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL REFERENCES commerce.orders(id) ON DELETE CASCADE,
    warehouse_id UUID NOT NULL REFERENCES logistics.warehouses(id),
    shipping_method_id UUID NOT NULL REFERENCES logistics.shipping_methods(id),
    status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'picked', 'packed', 'shipped', 'delivered', 'cancelled')),
    tracking_number TEXT,
    shipping_label_url TEXT,
    estimated_delivery_date DATE,
    actual_delivery_date DATE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: logistics.shipment_items

CREATE TABLE logistics.shipment_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    shipment_id UUID NOT NULL REFERENCES logistics.shipments(id) ON DELETE CASCADE,
    order_item_id UUID NOT NULL REFERENCES commerce.order_items(id),
    inventory_id UUID NOT NULL REFERENCES logistics.inventory(id),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(shipment_id, order_item_id)
);


-- Table: logistics.shipping_rates

CREATE TABLE logistics.shipping_rates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    shipping_method_id UUID NOT NULL REFERENCES logistics.shipping_methods(id) ON DELETE CASCADE,
    min_weight DECIMAL,
    max_weight DECIMAL,
    min_total DECIMAL,
    max_total DECIMAL,
    base_rate DECIMAL NOT NULL CHECK (base_rate >= 0),
    per_item_rate DECIMAL NOT NULL DEFAULT 0 CHECK (per_item_rate >= 0),
    per_weight_rate DECIMAL NOT NULL DEFAULT 0 CHECK (per_weight_rate >= 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_weight_range CHECK (min_weight IS NULL OR max_weight IS NULL OR min_weight <= max_weight),
    CONSTRAINT valid_total_range CHECK (min_total IS NULL OR max_total IS NULL OR min_total <= max_total)
);


-- Table: scheduling.service_providers

CREATE TABLE scheduling.service_providers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    title TEXT,
    bio TEXT,
    specialties TEXT[],
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: scheduling.service_types

CREATE TABLE scheduling.service_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    duration_minutes INTEGER NOT NULL,
    is_active BOOLEAN DEFAULT true,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: scheduling.appointments

CREATE TABLE scheduling.appointments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES scheduling.service_providers(id) ON DELETE CASCADE,
    client_id UUID NOT NULL REFERENCES core.profiles(id) ON DELETE CASCADE,
    service_type_id UUID NOT NULL REFERENCES scheduling.service_types(id) ON DELETE CASCADE,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    status TEXT NOT NULL CHECK (status IN ('pending', 'confirmed', 'cancelled', 'completed', 'no_show')),
    cancellation_reason TEXT,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_appointment_time CHECK (start_time < end_time)
);


-- Table: scheduling.appointment_feedback

CREATE TABLE scheduling.appointment_feedback (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    appointment_id UUID NOT NULL REFERENCES scheduling.appointments(id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    feedback_text TEXT,
    is_anonymous BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(appointment_id)
);


-- Table: scheduling.appointment_reminders

CREATE TABLE scheduling.appointment_reminders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    appointment_id UUID NOT NULL REFERENCES scheduling.appointments(id) ON DELETE CASCADE,
    reminder_type TEXT NOT NULL CHECK (reminder_type IN ('email', 'sms', 'push')),
    scheduled_time TIMESTAMP WITH TIME ZONE NOT NULL,
    sent_at TIMESTAMP WITH TIME ZONE,
    status TEXT NOT NULL CHECK (status IN ('pending', 'sent', 'failed')),
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Table: scheduling.provider_schedules

CREATE TABLE scheduling.provider_schedules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES scheduling.service_providers(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week BETWEEN 0 AND 6),
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    is_available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_time_range CHECK (start_time < end_time)
);


-- Table: scheduling.provider_services

CREATE TABLE scheduling.provider_services (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES scheduling.service_providers(id) ON DELETE CASCADE,
    service_type_id UUID NOT NULL REFERENCES scheduling.service_types(id) ON DELETE CASCADE,
    price DECIMAL CHECK (price >= 0),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(provider_id, service_type_id)
);


-- Table: scheduling.schedule_exceptions

CREATE TABLE scheduling.schedule_exceptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES scheduling.service_providers(id) ON DELETE CASCADE,
    exception_date DATE NOT NULL,
    start_time TIME,
    end_time TIME,
    is_available BOOLEAN DEFAULT FALSE,
    reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT valid_exception_time CHECK (
        (start_time IS NULL AND end_time IS NULL) OR
        (start_time IS NOT NULL AND end_time IS NOT NULL AND start_time < end_time)
    )
);


-- core .function
-- Function: core.jsonb_changed_keys

CREATE OR REPLACE FUNCTION core.jsonb_changed_keys(old_data JSONB, new_data JSONB)
RETURNS TEXT[] AS $$
DECLARE
    changed TEXT[];
    key TEXT;
BEGIN
    changed := ARRAY[]::TEXT[];
    
    -- Check deleted and modified keys
    FOR key IN SELECT * FROM jsonb_object_keys(old_data)
    LOOP
        IF NOT new_data ? key OR new_data->key IS DISTINCT FROM old_data->key THEN
            changed := array_append(changed, key);
        END IF;
    END LOOP;
    
    -- Check new keys
    FOR key IN SELECT * FROM jsonb_object_keys(new_data)
    LOOP
        IF NOT old_data ? key THEN
            changed := array_append(changed, key);
        END IF;
    END LOOP;
    
    RETURN changed;
END;
$$ LANGUAGE plpgsql IMMUTABLE;


-- personal .function
-- Function: personal.refresh_user_variable_stats

CREATE OR REPLACE FUNCTION personal.refresh_user_variable_stats()
RETURNS trigger AS $$
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY personal.user_variable_stats;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


-- personal .trigger
-- Trigger: personal.measurements_refresh_user_variable_stats_measurements
-- Original name: refresh_user_variable_stats_measurements

CREATE TRIGGER refresh_user_variable_stats_measurements
AFTER INSERT OR UPDATE OR DELETE ON personal.measurements
FOR EACH STATEMENT EXECUTE FUNCTION personal.refresh_user_variable_stats();


-- Trigger: personal.user_variables_refresh_user_variable_stats_variables
-- Original name: refresh_user_variable_stats_variables

CREATE TRIGGER refresh_user_variable_stats_variables
AFTER INSERT OR UPDATE OR DELETE ON personal.user_variables
FOR EACH STATEMENT EXECUTE FUNCTION personal.refresh_user_variable_stats();


-- models .function
-- Function: models.refresh_all_calculation_views

CREATE OR REPLACE FUNCTION models.refresh_all_calculation_views()
RETURNS void AS $$
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY models.intervention_outcome_effects;
    REFRESH MATERIALIZED VIEW CONCURRENTLY models.population_adjusted_effects;
    REFRESH MATERIALIZED VIEW CONCURRENTLY models.outcome_cost_impacts;
    REFRESH MATERIALIZED VIEW CONCURRENTLY models.cascading_outcome_effects;
    REFRESH MATERIALIZED VIEW CONCURRENTLY models.population_benefits;
END;
$$ LANGUAGE plpgsql;


-- models .view
-- View: models.equation_dependencies

CREATE VIEW models.equation_dependencies AS
WITH RECURSIVE deps AS (
    -- Base case: direct dependencies
    SELECT 
        id,
        name,
        input_variables as deps,
        1 as depth
    FROM models.model_equations
    
    UNION ALL
    
    -- Recursive case: dependencies of dependencies
    SELECT 
        d.id,
        d.name,
        array_cat(d.deps, e.input_variables) as deps,
        d.depth + 1 as depth
    FROM deps d
    JOIN models.model_equations e ON e.output_variable_id = ANY(d.deps)
    WHERE d.depth < 10  -- Prevent infinite recursion
)
SELECT DISTINCT ON (id)
    id,
    name,
    deps as all_dependencies,
    depth as dependency_depth
FROM deps
ORDER BY id, depth DESC;

COMMENT ON VIEW models.equation_dependencies IS 'Shows all variable dependencies for each equation, including indirect dependencies';


-- models .alter
-- Alter: models.cost_breakdowns
-- Alter statements for models.cost_breakdowns

ALTER TABLE models.cost_breakdowns ENABLE ROW LEVEL SECURITY;


-- Alter: models.intervention_effects
-- Alter statements for models.intervention_effects

ALTER TABLE models.intervention_effects ENABLE ROW LEVEL SECURITY;


-- Alter: models.model_equations
-- Alter statements for models.model_equations

ALTER TABLE models.model_equations ENABLE ROW LEVEL SECURITY;


-- Alter: models.parameter_sets
-- Alter statements for models.parameter_sets

ALTER TABLE models.parameter_sets ENABLE ROW LEVEL SECURITY;


-- Alter: models.parameter_sources
-- Alter statements for models.parameter_sources

ALTER TABLE models.parameter_sources ENABLE ROW LEVEL SECURITY;


-- Alter: models.population_demographics
-- Alter statements for models.population_demographics

ALTER TABLE models.population_demographics ENABLE ROW LEVEL SECURITY;


-- Alter: models.simulation_outputs
-- Alter statements for models.simulation_outputs

ALTER TABLE models.simulation_outputs ENABLE ROW LEVEL SECURITY;


-- Alter: models.statistical_validation
-- Alter statements for models.statistical_validation

ALTER TABLE models.statistical_validation ENABLE ROW LEVEL SECURITY;


-- finance .alter
-- Alter: finance.credits
-- Alter statements for finance.credits

ALTER TABLE finance.credits ENABLE ROW LEVEL SECURITY;


-- Alter: finance.credit_transactions
-- Alter statements for finance.credit_transactions

ALTER TABLE finance.credit_transactions ENABLE ROW LEVEL SECURITY;


-- Alter: finance.payment_methods
-- Alter statements for finance.payment_methods

ALTER TABLE finance.payment_methods ENABLE ROW LEVEL SECURITY;


-- Alter: finance.subscriptions
-- Alter statements for finance.subscriptions

ALTER TABLE finance.subscriptions ENABLE ROW LEVEL SECURITY;


-- Alter: finance.subscription_items
-- Alter statements for finance.subscription_items

ALTER TABLE finance.subscription_items ENABLE ROW LEVEL SECURITY;


-- Alter: finance.transactions
-- Alter statements for finance.transactions

ALTER TABLE finance.transactions ENABLE ROW LEVEL SECURITY;


-- commerce .alter
-- Alter: commerce.cart_items
-- Alter statements for commerce.cart_items

ALTER TABLE commerce.cart_items ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.discounts
-- Alter statements for commerce.discounts

ALTER TABLE commerce.discounts ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.orders
-- Alter statements for commerce.orders

ALTER TABLE commerce.orders ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.order_items
-- Alter statements for commerce.order_items

ALTER TABLE commerce.order_items ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.products
-- Alter statements for commerce.products

ALTER TABLE commerce.products ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.product_images
-- Alter statements for commerce.product_images

ALTER TABLE commerce.product_images ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.product_reviews
-- Alter statements for commerce.product_reviews

ALTER TABLE commerce.product_reviews ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.wishlists
-- Alter statements for commerce.wishlists

ALTER TABLE commerce.wishlists ENABLE ROW LEVEL SECURITY;


-- Alter: commerce.wishlist_items
-- Alter statements for commerce.wishlist_items

ALTER TABLE commerce.wishlist_items ENABLE ROW LEVEL SECURITY;


-- logistics .alter
-- Alter: logistics.inventory
-- Alter statements for logistics.inventory

ALTER TABLE logistics.inventory ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.inventory_transactions
-- Alter statements for logistics.inventory_transactions

ALTER TABLE logistics.inventory_transactions ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.returns
-- Alter statements for logistics.returns

ALTER TABLE logistics.returns ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.return_items
-- Alter statements for logistics.return_items

ALTER TABLE logistics.return_items ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.shipments
-- Alter statements for logistics.shipments

ALTER TABLE logistics.shipments ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.shipment_items
-- Alter statements for logistics.shipment_items

ALTER TABLE logistics.shipment_items ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.shipping_methods
-- Alter statements for logistics.shipping_methods

ALTER TABLE logistics.shipping_methods ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.shipping_rates
-- Alter statements for logistics.shipping_rates

ALTER TABLE logistics.shipping_rates ENABLE ROW LEVEL SECURITY;


-- Alter: logistics.warehouses
-- Alter statements for logistics.warehouses

ALTER TABLE logistics.warehouses ENABLE ROW LEVEL SECURITY;


-- scheduling .alter
-- Alter: scheduling.appointments
-- Alter statements for scheduling.appointments

ALTER TABLE scheduling.appointments ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.appointment_feedback
-- Alter statements for scheduling.appointment_feedback

ALTER TABLE scheduling.appointment_feedback ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.appointment_reminders
-- Alter statements for scheduling.appointment_reminders

ALTER TABLE scheduling.appointment_reminders ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.provider_schedules
-- Alter statements for scheduling.provider_schedules

ALTER TABLE scheduling.provider_schedules ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.provider_services
-- Alter statements for scheduling.provider_services

ALTER TABLE scheduling.provider_services ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.schedule_exceptions
-- Alter statements for scheduling.schedule_exceptions

ALTER TABLE scheduling.schedule_exceptions ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.service_providers
-- Alter statements for scheduling.service_providers

ALTER TABLE scheduling.service_providers ENABLE ROW LEVEL SECURITY;


-- Alter: scheduling.service_types
-- Alter statements for scheduling.service_types

ALTER TABLE scheduling.service_types ENABLE ROW LEVEL SECURITY;


-- Seed data (in dependency order)

