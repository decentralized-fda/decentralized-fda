/**
 * Decentralized FDA API
 * A platform for quantifying the effects of every drug, supplement, food, and other factor on your health.
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Button } from "../models/Button"
import { Card } from "../models/Card"
import { ConnectInstructions } from "../models/ConnectInstructions"

export class DataSource {
  /**
   * Ex: true
   */
  "affiliate": boolean
  /**
   * Background color HEX code that matches the icon
   */
  "backgroundColor"?: string
  "buttons"?: Array<Button>
  "card"?: Card
  /**
   * Your client id can be obtained by creating an app at https://builder.quantimo.do
   */
  "clientId"?: string
  /**
   * True if the authenticated user has this connector enabled
   */
  "connected"?: boolean
  /**
   * Ex: Your token is expired. Please re-connect
   */
  "connectError"?: string
  "connectInstructions"?: ConnectInstructions
  /**
   * Ex: 8
   */
  "connectorId"?: number
  /**
   * Ex: CONNECTED
   */
  "connectStatus"?: string
  /**
   * Number of measurements from this source or number of users who have measurements from this source
   */
  "count"?: number
  /**
   * Ex: 2000-01-01 00:00:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  "createdAt"?: string
  /**
   * Ex: ba7d0c12432650e23b3ce924ae2d21e2ff59e7e4e28650759633700af7ed0a30
   */
  "connectorClientId": string
  /**
   * Ex: Foods
   */
  "defaultVariableCategoryName": string
  /**
   * Ex: CureDAO
   */
  "displayName": string
  /**
   * Ex: 0
   */
  "enabled": number
  /**
   * Ex: https://quantimo.do
   */
  "getItUrl": string
  /**
   * Ex: 72
   */
  "id": number
  /**
   * Ex: https://safe.dfda.earth/img/logos/curedao-logo-qm-rainbow-200-200.png
   */
  "image": string
  /**
   * Ex: <a href=\"https://quantimo.do\"><img id=\"curedao_image\" title=\"CureDAO\" src=\"https://safe.dfda.earth/img/logos/curedao-logo-qm-rainbow-200-200.png\" alt=\"CureDAO\"></a>
   */
  "imageHtml": string
  /**
   * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  "lastSuccessfulUpdatedAt"?: string
  /**
   * Epoch timestamp of last sync
   */
  "lastUpdate"?: number
  /**
   * Ex: <a href=\"https://quantimo.do\">CureDAO</a>
   */
  "linkedDisplayNameHtml": string
  /**
   * Ex: CureDAO is a Chrome extension, Android app, iOS app, and web app that allows you to easily track mood, symptoms, or any outcome you want to optimize in a fraction of a second.  You can also import your data from over 30 other apps and devices like Fitbit, Rescuetime, Jawbone Up, Withings, Facebook, GitHub, Google Calendar, Runkeeper, MoodPanda, Slice, Google Fit, and more.  CureDAO then analyzes your data to identify which hidden factors are most likely to be influencing your mood or symptoms and their optimal daily values.
   */
  "longDescription": string
  /**
   * Ex: Got 412 new measurements on 2017-07-31 10:10:34
   */
  "message"?: string
  /**
   * Mobile connect method: webview, cordova, google, spreadsheet, or ip
   */
  "mobileConnectMethod"?: string
  /**
   * Ex: curedao
   */
  "name": string
  /**
   * Platforms (chrome, android, ios, web) that you can connect on.
   */
  "platforms"?: Array<string>
  /**
   * True if connection requires upgrade
   */
  "premium"?: boolean
  /**
   * Required connector scopes
   */
  "scopes"?: Array<string>
  /**
   * Ex: Tracks anything
   */
  "shortDescription": string
  /**
   * URL to POST a spreadsheet to (if available for this data source)
   */
  "spreadsheetUploadLink"?: string
  /**
   * Number of measurements obtained during latest update
   */
  "totalMeasurementsInLastUpdate"?: number
  /**
   * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  "updatedAt"?: string
  /**
   * Ex: 2017-07-18 05:16:31 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  "updateRequestedAt"?: string
  /**
   * Ex: UPDATED
   */
  "updateStatus"?: string
  /**
   * Ex: 230
   */
  "userId"?: number

  static readonly discriminator: string | undefined = undefined

  static readonly attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
    format: string
  }> = [
    {
      name: "affiliate",
      baseName: "affiliate",
      type: "boolean",
      format: "",
    },
    {
      name: "backgroundColor",
      baseName: "backgroundColor",
      type: "string",
      format: "",
    },
    {
      name: "buttons",
      baseName: "buttons",
      type: "Array<Button>",
      format: "",
    },
    {
      name: "card",
      baseName: "card",
      type: "Card",
      format: "",
    },
    {
      name: "clientId",
      baseName: "clientId",
      type: "string",
      format: "",
    },
    {
      name: "connected",
      baseName: "connected",
      type: "boolean",
      format: "",
    },
    {
      name: "connectError",
      baseName: "connectError",
      type: "string",
      format: "",
    },
    {
      name: "connectInstructions",
      baseName: "connectInstructions",
      type: "ConnectInstructions",
      format: "",
    },
    {
      name: "connectorId",
      baseName: "connectorId",
      type: "number",
      format: "",
    },
    {
      name: "connectStatus",
      baseName: "connectStatus",
      type: "string",
      format: "",
    },
    {
      name: "count",
      baseName: "count",
      type: "number",
      format: "",
    },
    {
      name: "createdAt",
      baseName: "createdAt",
      type: "string",
      format: "",
    },
    {
      name: "connectorClientId",
      baseName: "connectorClientId",
      type: "string",
      format: "",
    },
    {
      name: "defaultVariableCategoryName",
      baseName: "defaultVariableCategoryName",
      type: "string",
      format: "",
    },
    {
      name: "displayName",
      baseName: "displayName",
      type: "string",
      format: "",
    },
    {
      name: "enabled",
      baseName: "enabled",
      type: "number",
      format: "",
    },
    {
      name: "getItUrl",
      baseName: "getItUrl",
      type: "string",
      format: "",
    },
    {
      name: "id",
      baseName: "id",
      type: "number",
      format: "",
    },
    {
      name: "image",
      baseName: "image",
      type: "string",
      format: "",
    },
    {
      name: "imageHtml",
      baseName: "imageHtml",
      type: "string",
      format: "",
    },
    {
      name: "lastSuccessfulUpdatedAt",
      baseName: "lastSuccessfulUpdatedAt",
      type: "string",
      format: "",
    },
    {
      name: "lastUpdate",
      baseName: "lastUpdate",
      type: "number",
      format: "",
    },
    {
      name: "linkedDisplayNameHtml",
      baseName: "linkedDisplayNameHtml",
      type: "string",
      format: "",
    },
    {
      name: "longDescription",
      baseName: "longDescription",
      type: "string",
      format: "",
    },
    {
      name: "message",
      baseName: "message",
      type: "string",
      format: "",
    },
    {
      name: "mobileConnectMethod",
      baseName: "mobileConnectMethod",
      type: "string",
      format: "",
    },
    {
      name: "name",
      baseName: "name",
      type: "string",
      format: "",
    },
    {
      name: "platforms",
      baseName: "platforms",
      type: "Array<string>",
      format: "",
    },
    {
      name: "premium",
      baseName: "premium",
      type: "boolean",
      format: "",
    },
    {
      name: "scopes",
      baseName: "scopes",
      type: "Array<string>",
      format: "",
    },
    {
      name: "shortDescription",
      baseName: "shortDescription",
      type: "string",
      format: "",
    },
    {
      name: "spreadsheetUploadLink",
      baseName: "spreadsheetUploadLink",
      type: "string",
      format: "",
    },
    {
      name: "totalMeasurementsInLastUpdate",
      baseName: "totalMeasurementsInLastUpdate",
      type: "number",
      format: "",
    },
    {
      name: "updatedAt",
      baseName: "updatedAt",
      type: "string",
      format: "",
    },
    {
      name: "updateRequestedAt",
      baseName: "updateRequestedAt",
      type: "string",
      format: "",
    },
    {
      name: "updateStatus",
      baseName: "updateStatus",
      type: "string",
      format: "",
    },
    {
      name: "userId",
      baseName: "userId",
      type: "number",
      format: "",
    },
  ]

  static getAttributeTypeMap() {
    return DataSource.attributeTypeMap
  }

  public constructor() {}
}
