import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { ScrollToHashElement } from "@/components/ScrollToHashElement"
import { Header } from "@/components/Header"
import { Footer } from "@/components/Footer"
import { getServerUser } from "@/lib/server-auth"
import { getProfileByIdAction } from "../lib/actions/profiles"
import type { Profile } from "../lib/actions/profiles"
import { env } from "@/lib/env"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: env.NEXT_PUBLIC_SITE_NAME,
  description: env.NEXT_PUBLIC_SITE_DESCRIPTION,
  metadataBase: new URL(env.NEXT_PUBLIC_SITE_URL),
  keywords: [
    "clinical trials",
    "decentralized",
    "FDA",
    "healthcare",
    "medical research",
    "patient trials",
    "medical studies"
  ],
  authors: [{ name: "DFDA Team" }],
  // OpenGraph metadata for social media sharing
  // The image is dynamically generated by app/opengraph-image.tsx
  // Next.js will serve this at the /opengraph-image route
  openGraph: {
    title: `${env.NEXT_PUBLIC_SITE_NAME} - Decentralized Clinical Trials`,
    description: env.NEXT_PUBLIC_SITE_DESCRIPTION,
    url: env.NEXT_PUBLIC_SITE_URL,
    siteName: env.NEXT_PUBLIC_SITE_NAME,
    locale: "en_US",
    type: "website",
    images: [
      {
        url: "/opengraph-image",
        width: 1200,
        height: 630,
        alt: `${env.NEXT_PUBLIC_SITE_NAME} - Decentralized Clinical Trials Platform`
      }
    ]
  },
  // Twitter Card metadata for Twitter sharing
  // The image is dynamically generated by app/twitter-image.tsx
  // Next.js will serve this at the /twitter-image route
  twitter: {
    card: "summary_large_image",
    title: `${env.NEXT_PUBLIC_SITE_NAME} - Decentralized Clinical Trials`,
    description: env.NEXT_PUBLIC_SITE_DESCRIPTION,
    images: ["/twitter-image"],
    creator: env.NEXT_PUBLIC_TWITTER_HANDLE
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
  verification: {
    google: env.NEXT_PUBLIC_GOOGLE_VERIFICATION,
  },
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const user = await getServerUser()
  let profile: Profile | null = null

  if (user) {
    profile = await getProfileByIdAction(user.id)
  }

  return (
    <html lang="en">
      <body className={inter.className}>
        <ScrollToHashElement />
        <div className="min-h-screen flex flex-col">
          <Header initialUser={user} initialProfile={profile} />
          <main className="flex-1 py-6 md:py-10 w-full bg-background">
            <div className="container px-4 md:px-6 mx-auto">
              {children}
            </div>
          </main>
          <Footer />
        </div>
      </body>
    </html>
  )
}



import './globals.css'