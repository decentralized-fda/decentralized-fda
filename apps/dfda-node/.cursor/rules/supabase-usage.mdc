---
description:
globs:
alwaysApply: false
---
---
description: Guidelines for using Supabase clients in different Next.js contexts.
globs: 
  - "app/**/*.ts"
  - "app/**/*.tsx"
  - "components/**/*.tsx"
  - "lib/actions/**/*.ts"
  - "middleware.ts"
alwaysApply: true
---

# Supabase Client Usage Guide

This project uses the `@supabase/ssr` library and custom wrappers for Supabase authentication and data fetching.

## Client Tt Client:** Use the client generated by [`utils/supabase/client.ts`](mdc:utils/supabase/client.ts) (`createBrowserClient`) when you need to interact with Supabase directly from within a Client Component (files marked with `"use client"`).

2.  **Server-Side Client (Usnt factory function `createClient` (also exported as `createServerClient`) defined in [`utils/supabase/server.ts`](mdc:utils/supabase/server.ts). This function wraps `createServerClient` from `@supabase/ssr`.

3.  **Server-Side Client (Admin/Service Role):** Use the pre-configured `supabaseAdmin`se/admin.ts`](mdc:utils/supabase/admin.ts) for operations requiring service role privileges.

## Server Action & Server Component Usage

### User Context Client (`utils/supabase/server.ts`)

When using the server-side clin the user's context  in Server Actions (`"use server"`) or Server Components:

*   Import `createClient` (or `createServerClient`) from [`utils/supabase/server.ts`](mdc:utils/supabase/server.ts).
*   **Crucially, you MUST `await` this call**: `const supabase = await createClient();`
*   This client is initialized with the user's context via cookies. You **do not** need to manually call `cookies()` from `next/headers` or pass the cookie store, as this is handled internally by the `createClient` function.
*   This `createClient` function **does not** accept arguments to enable service role (e.g., passing `{ serviceRole: true }` will not work as expected). For service role operations, use the `supabaseAdmin` client.
*   Example: See [`lib/actions/search.ts`](mdc:lib/actions/search.ts) (ensure it uses `await createClient();`).

### Admin/Service Role Client (`utils/supabase/admin.ts`)

For server-side operations that require bypassing Row Level Security (RLS) or need full administrative privileges (e.g., accessing tables without user-specific policies, managing internal data):

*   Import `supabaseAdmin` from [`utils/supabase/admin.ts`](mdc:utils/supabase/admin.ts): `import { supabaseAdmin } from '@/utils/supabase/admin';`
*   This client is initialized with the `SUPABASE_SERVICE_ROLE_KEY` and is intended for server-side use only.
*   It does **not** require `await` for its initialization (it's a direct export of an already configured client instance, not an async factory function like `createClient`).
*   It should **not** be used for regular user operations where RLS is expected to apply.
*   Example Usage: `const { data, error } = await supabaseAdmin.from('some_table').select('*');` (as seen in `app/oauth/authorize/page.tsx` for fetching `oauth_clients`).

## Middleware

The [`middleware.ts`](mdc:middleware.ts) file uses helper functions (like `updateSession` from `utils/supabase/middleware.ts`) which handle cookie management and session refreshing automatically for server-side rendering, working in conjunction with the client setup.

## Security Note

*   In Server Components and Middleware, **always** use `(await supabase.auth.getUser()).data.user` to securely check authentication status and retrieve user data, as it revalidates the session with the Supabase server. (`supabase` here refers to the client from `utils/supabase/server.ts`).
*   **Never** trust `(await supabase.auth.getSession()).data.session` in server-side code for critical access control decisions as it relies solely on cookies which might not be up-to-date or could potentially be manipulated without revalidation.
