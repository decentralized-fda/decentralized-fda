---
description:
globs:
alwaysApply: false
---
---
description: Guidelines for using Supabase clients in different Next.js contexts.
globs: 
  - "app/**/*.ts"
  - "app/**/*.tsx"
  - "components/**/*.tsx"
  - "lib/actions/**/*.ts"
  - "middleware.ts"
alwaysApply: true
---

# Supabase Client Usage Guide

This project uses the `@supabase/ssr` library for Supabase authentication and data fetching.

## Client Types

1.  **Client Component Client:** Use the client generated by [`utils/supabase/client.ts`](mdc:utils/supabase/client.ts) (`createBrowserClient`) when you need to interact with Supabase directly from within a Client Component (files marked with `"use client"`).

2.  **Server-Side Client:** Use the client factory function `createClient` (also exported as `createServerClient`) defined in [`utils/supabase/server.ts`](mdc:utils/supabase/server.ts). This function wraps `createServerClient` from `@supabase/ssr` and **handles cookie management internally**.

## Server Action & Server Component Usage

When using the server-side client within Server Actions (`"use server"`) or Server Components:

*   Simply import and call `createClient` from [`utils/supabase/server.ts`](mdc:utils/supabase/server.ts): `const supabase = await createClient();`
*   You **do not** need to manually call `cookies()` from `next/headers` or pass the cookie store, as this is handled within the `createClient` function itself.
*   Example: See [`lib/actions/search.ts`](mdc:lib/actions/search.ts)

## Middleware

The [`middleware.ts`](mdc:middleware.ts) file uses helper functions (like `updateSession` from `utils/supabase/middleware.ts`) which handle cookie management and session refreshing automatically for server-side rendering, working in conjunction with the client setup.

## Security Note

*   In Server Components and Middleware, **always** use `supabase.auth.getUser()` to securely check authentication status and retrieve user data, as it revalidates the session with the Supabase server.
*   **Never** trust `supabase.auth.getSession()` in server-side code as it relies solely on cookies which might not be up-to-date or could potentially be manipulated.
