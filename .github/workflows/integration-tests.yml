name: Web Tests

on:
  # Run on all pushes
  push:
  # Run on all PRs
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.3
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Cache Next.js build output
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            apps/web/.next/cache
            apps/web/.next-ci/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('apps/web/**.[jt]s', 'apps/web/**.[jt]sx', 'apps/web/package.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      # Ensure cache directories exist
      - name: Create cache directories
        run: mkdir -p apps/web/.next/cache apps/web/.next-ci/cache
        shell: bash
            
      # Install dependencies
      - name: Install dependencies
        working-directory: apps/web
        run: pnpm install --frozen-lockfile
            
      # Setup environment variables
      - name: Setup environment variables
        working-directory: apps/web
        run: |
          cp .env.example .env
          echo "USE_LOCAL_REDIS=true" >> .env
          echo "LOCAL_REDIS_URL=redis://localhost:6379" >> .env

      # Setup Docker and Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v3

      # Start database for tests
      - name: Start test database and Redis
        working-directory: apps/web
        run: |
          docker compose -f docker-compose.test.yml up -d db redis
          echo "Waiting for database to be ready..."
          timeout 30 bash -c 'until docker exec dfda-postgres pg_isready; do sleep 2; done' || false
          echo "Waiting for Redis to be ready..."
          timeout 30 bash -c 'until docker exec redis redis-cli ping; do sleep 2; done' || false
            
      # Setup database schema
      - name: Setup database schema
        working-directory: apps/web
        run: pnpm prisma:migrate

      # Run unit tests
      - name: Run unit tests
        working-directory: apps/web
        run: pnpm test:unit --reporters=default --reporters=github-actions
        env:
          CI: true
            
      # Build and run integration tests
      - name: Build and run integration tests
        working-directory: apps/web
        run: |
          pnpm run build
          pnpm start &
          echo "Waiting for Next.js to be ready..."
          timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 2; done' || false
          pnpm test:integration --reporters=default --reporters=github-actions --verbose
        env:
          CI: true

      # Upload test results and coverage reports
      - name: Upload test results
        if: always()
        run: |
          mkdir -p apps/web/coverage apps/web/test-results
          find apps/web -name "junit.xml" -o -name "test-report.html" -o -path "apps/web/coverage/*" -o -path "apps/web/test-results/*" > artifact_list.txt
          if [ -s artifact_list.txt ]; then
            echo "Found test artifacts to upload"
            cat artifact_list.txt
          else
            echo "No test artifacts found to upload"
            exit 0
          fi
        shell: bash

      - name: Upload artifacts
        if: always() && success()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            apps/web/coverage/
            apps/web/test-results/
            apps/web/**/junit.xml
            apps/web/test-report.html
            apps/web/unit-test-report.html
          retention-days: 30 