---
description: installing or updating dependencies or libraries or running package.json scripts
globs: 
alwaysApply: false
---

Use pnpm

# Dependency and Script Management Guidelines

## Package Manager
- Use pnpm exclusively for all package management
- Never mix package managers (no npm or yarn commands)
- Use pnpm workspaces for monorepo management
- Run `pnpm install` after pulling new changes

## Script Naming Conventions
- Follow Next.js conventions for common scripts:
  - `dev` - development server
  - `build` - production build
  - `start` - production server
  - `lint` - ESLint
  - `test` - Jest tests
  - `test:watch` - Jest watch mode
  - `test:e2e` - E2E tests
  - `type-check` - TypeScript checks

## Script Execution
- Use `pnpm run` or `pnpm` for running scripts
- For one-off scripts, use `ts-node` with CommonJS
- Avoid modifying TypeScript settings for scripts
- Keep scripts compatible with Next.js defaults

## Version Management
- Use exact versions for Next.js dependencies
- Use caret (^) for other dependencies
- Keep pnpm-lock.yaml in version control

## File Patterns
```glob
package.json
pnpm-lock.yaml
scripts/**/*
```

## Examples
Good dependency practices:
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "custom-script": "ts-node scripts/custom.ts"
  }
}
```

Bad practices:
```bash
npm install # Don't use npm
yarn add # Don't use yarn
```